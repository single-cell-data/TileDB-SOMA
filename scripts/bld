#!/usr/bin/env bash

set -eu -o pipefail

# A script to build and install the C++ library

BUILD_TYPE=${BUILD_TYPE:-Release} # default to Release build
echo "Building ${BUILD_TYPE} build"

# cd to the top level directory of the repo
cd "$(git rev-parse --show-toplevel)"

# set env for pybind11 cmake
export pybind11_DIR=$(python -m pybind11 --cmakedir)
if [ -z $pybind11_DIR ]; then
  echo "Please install pybind11"
  exit 1
fi

if [ $(uname) = "Darwin" ]; then
    nproc=$(sysctl -n hw.ncpu)
else
    nproc=$(nproc)
fi

if [ $BUILD_TYPE == "Debug" ]; then
  # Debug build: build TileDB from source with debug enabled
  EXTRA_OPTS="-DFORCE_EXTERNAL_TILEDB=ON -DDOWNLOAD_TILEDB_PREBUILT=OFF"
elif [ $(uname -m) = "aarch64" ]; then
  # build on arm: build TileDB from source
  EXTRA_OPTS="-DFORCE_EXTERNAL_TILEDB=ON -DDOWNLOAD_TILEDB_PREBUILT=OFF"
else
  EXTRA_OPTS=""
  # Debug note: this is _incredibly_ helpful in that it reveals the actual compile lines etc which
  # make itself shows by default but which cmake-driven make hides by default. Use this for any
  # non-trivial cmake debugging.
  # EXTRA_OPTS="-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON"

  # TILEDB_WERROR=OFF is necessary to build core with XCode 14; doesn't hurt for XCode 13.
  # EXTRA_OPTS="-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DTILEDB_WERROR=OFF _DTILEDBSOMA_ENABLE_WERROR=OFF"
  
  # Also (pro-tip), set nproc=1 to get a more deterministic ordering of output lines.
  # nproc=1
fi

rm -rf build
mkdir -p build
cmake -B build -S libtiledbsoma -DCMAKE_BUILD_TYPE=${BUILD_TYPE} ${EXTRA_OPTS}
cmake --build build -j $nproc
cmake --build build --target install-libtiledbsoma

if [ -v CI ]; then
  cmake --build build/libtiledbsoma --target build_tests -j $nproc
fi
