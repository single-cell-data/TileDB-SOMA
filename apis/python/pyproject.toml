[build-system]
requires = [
    "scikit-build-core>=0.10.0",
    "setuptools_scm>=8.0.0",
    "pybind11>=2.10.0",
    # Note: cmake is automatically provided by scikit-build-core
]
build-backend = "scikit_build_core.build"

[project]
name = "tiledbsoma"
dynamic = ["version"]
description = "Python API for efficient storage and retrieval of single-cell data using TileDB"
readme = "README.md"
authors = [
    {name = "TileDB, Inc.", email = "help@tiledb.io"}
]
maintainers = [
    {name = "TileDB, Inc.", email = "help@tiledb.io"}
]
license = {text = "MIT"}
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Operating System :: Unix",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.9"
dependencies = [
    "anndata>=0.10.1",
    "attrs>=22.2",
    "more-itertools",
    "numpy",
    "pandas",
    "pyarrow",
    "scanpy>=1.9.2",
    "scipy",
    # Note: the somacore version is also in .pre-commit-config.yaml
    "somacore==1.0.29",
    "typing-extensions>=4.5.0",  # Note "-" even though `import typing_extensions`
]

[project.optional-dependencies]
dev = [
    "black",
    "dask",
    "pytest",
    "pytest-cov",
    "ruff",
    "sparse",
    "typeguard==4.4.2",
    "types-setuptools",
    "more-itertools",
    "hypothesis",
    "deepdiff",
]
spatial-io = [
    "geopandas",
    "tifffile",
    "pillow",
    "spatialdata>=0.2.5",
    "xarray",
    "dask",
]
all = [
    "black",
    "dask",
    "pytest",
    "pytest-cov",
    "ruff",
    "sparse",
    "typeguard==4.4.2",
    "types-setuptools",
    "more-itertools",
    "hypothesis",
    "deepdiff",
    "geopandas",
    "tifffile",
    "pillow",
    "spatialdata>=0.2.5",
    "xarray",
]

[project.urls]
Homepage = "https://github.com/single-cell-data/TileDB-SOMA/tree/main/apis/python"

# ============================================================================
# scikit-build-core configuration
# Integrates CMake build with Python packaging
# ============================================================================
[tool.scikit-build]
cmake.version = ">=3.21"
cmake.build-type = "Release"
# Wheel installation configuration
wheel.install-dir = "tiledbsoma"
wheel.packages = ["src/tiledbsoma"]
wheel.exclude = ["*.cc", "*.h", "*.hpp"]
# Build configuration
logging.level = "INFO"
build.targets = ["pytiledbsoma"]
minimum-version = "0.10"
# Version is handled by setuptools_scm - no manual VERSION file needed

[tool.scikit-build.cmake.define]
# CMake options passed to the build
CMAKE_BUILD_TYPE = "Release"
BUILD_LIBTILEDBSOMA = "ON"  # Build libtiledbsoma from source using vcpkg

[tool.setuptools_scm]
# Automatically derives version from Git tags
# This is the recommended approach for scikit-build-core

# ============================================================================
# cibuildwheel configuration
# Multi-platform wheel building for CI/CD
# ============================================================================
[tool.cibuildwheel]
# Target Python versions
build = ["cp39-*", "cp310-*", "cp311-*", "cp312-*", "cp313-*"]
skip = ["*-win32", "*-manylinux_i686", "*-musllinux_*"]
# Build and test configuration
build-verbosity = 3
test-command = "python -c 'import tiledbsoma; print(tiledbsoma.pytiledbsoma.__file__); tiledbsoma.show_package_versions()'"
test-requires = ["pytest"]

[tool.cibuildwheel.linux]
# Use manylinux_2_28 for better compatibility with modern dependencies
manylinux-x86_64-image = "manylinux_2_28"
manylinux-aarch64-image = "manylinux_2_28"
# Install system dependencies and bootstrap vcpkg
before-all = [
    "yum install -y git ninja-build perl-IPC-Cmd zip autoconf automake libtool pkg-config",
    "bash {project}/scripts/setup_build_env.sh",
]
# VERSION file is generated by scikit-build before-build hook
# Environment variables for vcpkg build
# VCPKG_FORCE_SYSTEM_BINARIES=1 for Linux ARM64 compatibility
environment = {
    VCPKG_FORCE_SYSTEM_BINARIES="${CIBW_VCPKG_FORCE_SYSTEM_BINARIES:-1}",
    CMAKE_TOOLCHAIN_FILE="/project/vcpkg/scripts/buildsystems/vcpkg.cmake",
    VCPKG_ROOT="/project/vcpkg"
}

[tool.cibuildwheel.macos]
# Set minimum macOS deployment target for compatibility
# Configurable via CIBW_MACOSX_DEPLOYMENT_TARGET environment variable
environment = {
    MACOSX_DEPLOYMENT_TARGET="${CIBW_MACOSX_DEPLOYMENT_TARGET:-13.3}",
    CMAKE_TOOLCHAIN_FILE="/project/vcpkg/scripts/buildsystems/vcpkg.cmake",
    VCPKG_ROOT="/project/vcpkg"
}
# Install system dependencies and bootstrap vcpkg
before-all = [
    "brew update || true",
    "brew install automake llvm ninja git || true",
    "bash {project}/scripts/setup_build_env.sh",
]
# VERSION file is generated by scikit-build before-build hook

[tool.cibuildwheel.windows]
# Install system dependencies and bootstrap vcpkg
before-all = [
    "choco install ninja cmake git -y",
    "powershell -ExecutionPolicy Bypass -File {project}\\scripts\\setup_build_env.ps1",
]
# VERSION file is generated by scikit-build before-build hook
# Environment variables for vcpkg build
environment = {
    CMAKE_TOOLCHAIN_FILE="C:\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake",
    VCPKG_ROOT="C:\\vcpkg"
}

[tool.mypy]
show_error_codes = true
ignore_missing_imports = true
warn_unreachable = true
strict = true
python_version = 3.9

[[tool.mypy.overrides]]
module = "tiledbsoma._query_condition"
ignore_errors = true

[tool.ruff]
fix = true
preview = true  # enables "beta" rules: https://docs.astral.sh/ruff/preview/
exclude = ["*.cc"]
target-version = "py39"
line-length = 120

[tool.ruff.lint]
select = [  # see https://docs.astral.sh/ruff/rules/
    # consider adding:  A (flake8-builtins) and TC (flake8-type-checking)
    "ANN",  # flake8-annotations
    "ARG",  # flake8-unused-arguments
    "B",    # flake8-bugbear
    "BLE",  # flake8-blind-exception
    "C4",   # flake8-comprehensions
    "COM",  # flake8-commas
    "CPY",  # flake8-copyright
    "D",    # pydocstyle (Google convention, see setting below)
    "E",    # pycodestyle
    "ERA",  # eradicate
    "F",    # Pyflakes
    "FA",   # flake8-future-annotations
    "FLY",  # flynt
    "I",    # isort
    "ICN",  # flake8-import-conventions
    "INP",  # flake8-no-pep420
    "ISC",  # flake8-implicit-str-concat
    "LOG",  # flake8-logging
    "NPY",  # numpy-specific rules
    "PD",   # pandas-vet
    "PERF", # perflint
    "PIE",  # flake8-pie
    "PLC",  # pylint-convention
    "PLE",  # pylint-error
    "PLW",  # pylint-warning
    "PTH",  # flake8-use-pathlib
    "S",    # flake8-bandit
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "Q",    # flake8-quotes
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # Ruff-specific rules
    "SLOT", # flake8-slots
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "W",    # pycodestyle warnings
    "YTT",  # flake8-2020
    "UP",   # pyupgrade
]
ignore = [
    "E501",     # line too long
    "D417",     # disable documentation for every function parameter
    "D205",     # disable blank line requirement between summary and description
    "S101",     # Use of `assert` detected
    "COM812",   # Ignore recommended by Ruff
    "SIM105",   # contextlib.suppress
    "PLC0415",  # inport-outside-top-level
    "PLC2701",  # import-private-name
    "PLW1514",  # unspecified-encoding
    "PLW2901",  # redefined-loop-name
    "PD002",    # pandas-use-of-inplace-argument
]
extend-select = []

[tool.ruff.lint.per-file-ignores]
# Ignore these rules everywhere except for the `src/` directory.
# Over time, we should enforce these rules more broadly.
"!apis/python/src/**.py" = ["ANN", "ARG", "BLE", "C4", "CPY", "D", "ERA", "B", "INP", "S", "T20", "NPY002", "PTH"]

# Ignore in notebooks
"apis/python/**/*.ipynb" = ["COM"]

# Temporarily disable checks in the io and io.spatial modules.
"apis/python/src/tiledbsoma/io/**/*.py" = [
    "D100",  # Missing docstring in public module (TEMP disable)
    "D101",  # Missing docstring in public class (TEMP disable)
    "D102",  # Missing docstring in public method (TEMP disable)
    "D103",  # Missing docstring in public function (TEMP disable)
    "D104",  # Missing docstring in private module (TEMP disable)
    "D107",  # Missing docstring in `__init__` (TEMP disable)
]

[tool.ruff.lint.isort]
# HACK: tiledb needs to come after tiledbsoma: https://github.com/single-cell-data/TileDB-SOMA/issues/2293
section-order = ["future", "standard-library", "third-party", "tiledbsoma", "tiledb", "first-party", "local-folder"]
no-lines-before = ["tiledb"]

[tool.ruff.lint.isort.sections]
"tiledbsoma" = ["tiledbsoma"]
"tiledb" = ["tiledb"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-copyright]
author = "TileDB, Inc. and The Chan Zuckerberg Initiative Foundation"
notice-rgx = "(?i)Copyright \\(C\\)"  # do not require year
min-file-size = 1   # don't require copyright on empty files, e.g., __init__.py

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
# additional import aliases to be enforced
anndata = "ad"
scanpy = "sc"

[tool.pytest.ini_options]
filterwarnings = ["ignore:Support for spatial types is experimental"]
markers = [
    "slow: mark test as slow",
    "spatialdata: test of SpatialData integration",
    "medium_runner: tests that are too large for the MacOS GitHub runners",
]
