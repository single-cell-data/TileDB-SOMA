#!/usr/bin/env python

# ================================================================
# Sample usage:
#
# populate-soco -o my-collection -a ~/scdata/corpus/*
# ================================================================

import argparse
import logging
import os
import sys

import tiledbsc

logger = logging.getLogger("tiledbsc")


# ================================================================
def main():
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    parser = argparse.ArgumentParser(
        description="Populate a SOMA collection from a list of SOMAs."
    )
    parser.add_argument(
        "-o",
        help="Specify output directory to contain the somas",
        type=str,
        default="./soma-collection",
    )
    parser.add_argument(
        "-a",
        "--add",
        help="Add specified SOMA URI(s) to the collection",
        action="store_true",
    )
    parser.add_argument(
        "-r",
        "--remove",
        help="Remove specified SOMA URI(s) from the collection",
        action="store_true",
    )
    parser.add_argument(
        "-l",
        "--list",
        help="List the SOMA URI(s) in the collection",
        action="store_true",
    )
    parser.add_argument(
        "paths", type=str, help="Paths to one or more SOMA directories.", nargs="*"
    )
    parser.add_argument(
        "--relative",
        help="""
* If `false` then the group will remember the absolute paths of each member array/subgroup. For
ingesting to TileDB Cloud, this is necessary.

* If `true` then the group will have the relative pth of the member. For TileDB Cloud, this
is never the right thing to do. For local-disk storage, this is essential if you want to move
a SOMA to another directory and have it be able access its members.

* If `auto`, then we select `relative=False` if the URI starts with `tiledb://`, else we
select `relative=True`. (This is the default.)
""",
        choices=["true", "false", "auto"],
        nargs=1,
    )
    args = parser.parse_args()

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    collection_path = args.o.rstrip("/")

    if args.relative is None:
        rel_member_uris = None
    else:
        relative = args.relative[0]
        if relative == "true":
            rel_member_uris = True
        elif relative == "false":
            rel_member_uris = False
        elif relative == "auto":
            rel_member_uris = None
        else:
            raise Exception(f"Internal coding error in {__file__}")

    soco = tiledbsc.SOMACollection(
        collection_path,
        soma_options=tiledbsc.SOMAOptions(member_uris_are_relative=rel_member_uris),
    )

    count = 0
    if args.add:
        count += 1
    if args.remove:
        count += 1
    if args.list:
        count += 1
    if count != 1:
        logging.error(
            f"{os.path.basename(sys.argv[0])}: need just one of -a, -r, or -l."
        )
        sys.exit(1)

    if args.add or args.remove:
        if len(args.paths) < 1:
            parser.print_help(file=sys.stderr)
            sys.exit(1)
    else:
        if len(args.paths) > 0:
            parser.print_help(file=sys.stderr)
            sys.exit(1)

    if args.add:
        for soma_uri in args.paths:
            soma_uri = soma_uri.rstrip("/")
            name = os.path.basename(soma_uri)
            soma = tiledbsc.SOMA(uri=soma_uri, name=name, parent=soco)
            logger.info(f"Adding {name} to {soma_uri}")
            soco.add(soma)

    if args.remove:
        for soma_uri in args.paths:
            soma_uri = soma_uri.rstrip("/")
            name = os.path.basename(soma_uri)
            soma = tiledbsc.SOMA(uri=soma_uri, name=name, parent=soco)
            logger.info(f"Removing {name} from {soma_uri}")
            soco.remove(soma)

    if args.list:
        for soma in soco:
            print("%-30s %s" % (soma.name, soma.uri))


# ================================================================
if __name__ == "__main__":
    main()
