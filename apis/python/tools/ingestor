#!/usr/bin/env python

"""
A simple driver for ingestion of anndata to a TileDB SOMA.

* Invoke this with one argument /path/to/some/somename.h5ad:
  o Output will be ./tiledb-data/somename

* Invoke this with two arguments to specify input anndata HDF5 file
  and output TileDB group.

Nominal immediate-term support is to local disk and S3, although output to tiledb:/...
URIs will be supported.
"""

import argparse
import os
import shutil
import sys

import tiledb

import tiledbsoma
import tiledbsoma.io
import tiledbsoma.util


# ================================================================
def main():
    parser = argparse.ArgumentParser(
        description="Ingest soma data from anndata/h5ad into TileDB group structure"
    )
    parser.add_argument(
        "-q", "--quiet", help="decrease output verbosity", action="store_true"
    )
    parser.add_argument(
        "--debug", help="increase output verbosity", action="store_true"
    )
    parser.add_argument(
        "-n",
        help="All arguments after flags are treated as input paths",
        action="store_true",
    )
    parser.add_argument(
        "--schema-only",
        help="Only create groups and array schemas; do not write array data. Useful for prep-step for parallel append-mode ingest.",
        action="store_true",
    )
    parser.add_argument(
        "-x",
        help="Shorthand for `--ifexists replace`",
        action="store_true",
    )
    parser.add_argument(
        "-u",
        help="Shorthand for `--ifexists update`",
        action="store_true",
    )
    parser.add_argument(
        "-o",
        help="Specify output directory to contain the somas",
        type=str,
        default="./tiledb-data",
    )
    parser.add_argument(
        "--threads",
        help="Specify max thread-pool workers",
        type=int,
        default=tiledbsoma.SOMAOptions().max_thread_pool_workers,
    )
    parser.add_argument(
        "--soco",
        help="Write the SOMA and also append to a SOMACollection there",
        action="store_true",
    )
    parser.add_argument(
        "-r",
        "--relative",
        help="""
* If `false` then the group will remember the absolute paths of each member array/subgroup. For
ingesting to TileDB Cloud, this is necessary.

* If `true` then the group will have the relative pth of the member. For TileDB Cloud, this
is never the right thing to do. For local-disk storage, this is essential if you want to move
a SOMA to another directory and have it be able access its members.

* If `auto`, then we select `relative=False` if the URI starts with `tiledb://`, else we
select `relative=True`. (This is the default.)
""",
        choices=["true", "false", "auto"],
        nargs=1,
    )
    # TODO: add an update option once we figure out tiledb.from_pandas mode=overwrite flag.
    parser.add_argument(
        "--ifexists",
        help="What to do if soma storage already exists. Default: continue.",
        choices=["replace", "abort", "continue", "update", "update_obs_and_var"],
        type=str,
        nargs=1,
    )
    parser.add_argument(
        "paths",
        type=str,
        help="One for specified input with default output path, or two to specify input and output paths, or multiple input paths if -n is specified",
        nargs="*",
    )
    args = parser.parse_args()

    if args.ifexists is None:
        if args.x:
            args.ifexists = ["replace"]
        elif args.u:
            args.ifexists = ["update"]
        else:
            args.ifexists = ["continue"]

    write_soco = args.soco
    if args.debug:
        tiledbsoma.logging.debug()
    elif args.quiet:
        tiledbsoma.logging.warning()
    # else default is tiledbsoma.logging.info() in our __init__.py

    if args.relative is None:
        rel_member_uris = None
    else:
        relative = args.relative[0]
        if relative == "true":
            rel_member_uris = True
        elif relative == "false":
            rel_member_uris = False
        elif relative == "auto":
            rel_member_uris = None
        else:
            raise Exception(f"Internal coding error in {__file__}")

    soma_options = tiledbsoma.SOMAOptions(
        member_uris_are_relative=rel_member_uris,
        max_thread_pool_workers=args.threads,
    )
    outdir = args.o.rstrip("/")

    if args.n:
        if len(args.paths) < 1:
            parser.print_help(file=sys.stderr)
            sys.exit(1)
        for input_path in args.paths:
            # Example 'anndata/pbmc3k_processed.h5ad' -> 'tiledb-data/pbmc3k_processed'
            output_path = os.path.join(
                outdir, os.path.splitext(os.path.basename(input_path))[0]
            )
            ingest_one(
                input_path=input_path,
                output_path=output_path,
                ifexists=args.ifexists[0],
                schema_only=args.schema_only,
                soma_options=soma_options,
                write_soco=write_soco,
                soco_dir=outdir,
            )
    else:
        if len(args.paths) == 0:
            input_path = "anndata/pbmc-small.h5ad"
            output_path = os.path.join(outdir, "pbmc-small")
            ingest_one(
                input_path=input_path,
                output_path=output_path,
                ifexists=args.ifexists[0],
                schema_only=args.schema_only,
                soma_options=soma_options,
                write_soco=write_soco,
                soco_dir=outdir,
            )
        elif len(args.paths) == 1:
            input_path = args.paths[0]
            # Example 'anndata/pbmc3k_processed.h5ad' -> 'tiledb-data/pbmc3k_processed'
            output_path = os.path.join(
                outdir, os.path.splitext(os.path.basename(input_path))[0]
            )
            ingest_one(
                input_path=input_path,
                output_path=output_path,
                ifexists=args.ifexists[0],
                schema_only=args.schema_only,
                soma_options=soma_options,
                write_soco=write_soco,
                soco_dir=outdir,
            )
        elif len(args.paths) == 2:
            input_path = args.paths[0]
            output_path = args.paths[1]
            ingest_one(
                input_path=input_path,
                output_path=output_path,
                ifexists=args.ifexists[0],
                schema_only=args.schema_only,
                soma_options=soma_options,
                write_soco=write_soco,
                soco_dir=outdir,
            )
        else:
            parser.print_help(file=sys.stderr)
            sys.exit(1)


# ================================================================
def ingest_one(
    *,
    input_path: str,
    output_path: str,
    ifexists: str,
    schema_only: bool,
    soma_options: tiledbsoma.SOMAOptions,
    write_soco: bool,
    soco_dir: str,
):
    # Check that the input exists.
    vfs = tiledb.VFS()
    if not vfs.is_file(input_path):
        # Print this neatly and exit neatly, to avoid a multi-line stack trace otherwise.
        tiledbsoma.logging.logger.error(f"Input path not found: {input_path}")
        sys.exit(1)

    # Prepare to write the output.
    # This is for local-disk use only -- for S3-backed tiledb://... URIs we should
    # use tiledb.vfs to remove any priors, and/or make use of a tiledb `overwrite` flag.
    parent = os.path.dirname(output_path.rstrip("/"))
    if parent != "":
        if tiledbsoma.util.is_local_path(parent):
            if not os.path.exists(parent):
                os.mkdir(parent)

    soma = tiledbsoma.SOMA(uri=output_path, soma_options=soma_options)

    if ifexists == "update_obs_and_var":
        if not os.path.exists(output_path):
            raise Exception("Cannot update; doesn't exist yet:", output_path)
        # Do the ingest into TileDB.
        tiledbsoma.io.from_h5ad_update_obs_and_var(
            soma, input_path, schema_only=schema_only
        )

    else:
        if os.path.exists(output_path):
            if ifexists == "continue":
                tiledbsoma.logging.logger.info(
                    f"Already exists; continuing: {output_path}"
                )
                return

            elif ifexists == "abort":
                tiledbsoma.logging.error(f"Already exists; aborting: {output_path}")
                sys.exit(1)

            elif ifexists == "replace":
                if output_path.startswith("s3://") or output_path.startswith(
                    "tiledb://"
                ):
                    raise Exception(
                        "--ifexists replace currently only is compatible with local-disk paths"
                    )
                tiledbsoma.logging.logger.info(
                    f"Already exists; replacing: {output_path}"
                )
                shutil.rmtree(output_path)  # Overwrite

            elif ifexists == "update":
                tiledbsoma.logging.logger.info(
                    f"Already exists; updating: {output_path}"
                )

            else:
                raise Exception(
                    "Internal coding error in --ifexists handling.", ifexists, "<"
                )
        # Do the ingest into TileDB.
        tiledbsoma.io.from_h5ad(soma, input_path, schema_only=schema_only)

    tiledbsoma.logging.logger.info(f"Wrote {output_path}")

    if write_soco:
        soco = tiledbsoma.SOMACollection(soco_dir, soma_options=soma_options)
        soco.create_unless_exists()
        if not soco.exists():
            raise Exception(f"Could not create SOCO at {soco.uri}")
        soco.add(soma)

        tiledbsoma.logging.logger.info("")
        tiledbsoma.logging.logger.info(
            f"Added SOMA {soma.name} to SOMACollection {soco_dir}"
        )


# ================================================================
if __name__ == "__main__":
    main()
