#!/usr/bin/env python

# ================================================================
# A simple driver for outgestion of a TileDB soma group to anndata.
#
# * Invoke this with one argument /path/to/some/somagroup:
#   o Output will be ./anndata-readback/somagroup.h5ad
#
# * Invoke this with two arguments to specify input TileDB group and
#   output anndata HDF5 file.
#
# Nominal immediate-term support is to local disk, although input from tiledb:/...
# URIs will be supported.
# ================================================================

import argparse
import os
import shutil
import sys

import anndata as ad
import numpy as np
import pandas as pd
import scipy
import tiledb

import tiledbsc
import tiledbsc.io
import tiledbsc.util


def main():
    parser = argparse.ArgumentParser(
        description="Outgest soma data from TileDB group structure to anndata/h5ad"
    )
    parser.add_argument(
        "-q", "--quiet", help="decrease output verbosity", action="store_true"
    )
    parser.add_argument(
        "-o",
        help="Specify output directory to contain the somas: default ./anndata-readback",
        type=str,
        default="./anndata-readback",
    )
    parser.add_argument(
        "paths",
        type=str,
        help="One for specified input with default output path, or two to specify input and output paths",
        nargs="*",
    )
    args = parser.parse_args()

    outdir = args.o.rstrip("/")

    if len(args.paths) == 0:
        input_path = "tiledb-data/pbmc-small"
        output_path = os.path.join(outdir, "pbmc-small.h5ad")
    elif len(args.paths) == 1:
        # Strip trailing slashes so basename will behave correctly
        input_path = args.paths[0].rstrip("/")
        # Example 'tiledb-data/pbmc3k_processed' -> 'anndata-readcbak/pbmc3k_processed.h5ad'
        output_path = os.path.join(outdir, os.path.basename(input_path) + ".h5ad")
    elif len(args.paths) == 2:
        input_path = args.paths[0]
        output_path = args.paths[1]
    else:
        parser.print_help(file=sys.stderr)
        sys.exit(1)

    vfs = tiledb.VFS()
    if not vfs.is_dir(input_path):
        # Print this neatly and exit neatly, to avoid a multi-line stack trace otherwise.
        print(f"Input path not found: {input_path}", file=sys.stderr)
        sys.exit(1)

    # This is for local-disk use only -- for S3-backed tiledb://... URIs we should
    # use tiledb.vfs to remove any priors, and/or make use of a tiledb `overwrite` flag.
    if tiledbsc.util.is_local_path(outdir):
        if not os.path.exists(outdir):
            os.mkdir(outdir)

    verbose = not args.quiet
    soma = tiledbsc.SOMA(input_path, verbose=verbose)
    tiledbsc.io.to_h5ad(soma, output_path)

    if not verbose:
        print(f"Wrote {output_path}")


if __name__ == "__main__":
    main()
