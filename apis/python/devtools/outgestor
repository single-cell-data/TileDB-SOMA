#!/usr/bin/env python

# ================================================================
# A simple driver for outgestion of a TileDB soma group to anndata.
#
# * Invoke this with one argument /path/to/some/somagroup:
#   o Output will be ./anndata-readback-tiledbsoma/somagroup.h5ad
#
# * Invoke this with two arguments to specify input TileDB group and
#   output anndata HDF5 file.
#
# Nominal immediate-term support is to local disk, although input from tiledb:/...
# URIs will be supported.
# ================================================================

import argparse
import logging
import os
import sys

import tiledb

import tiledbsoma
import tiledbsoma._util
import tiledbsoma.io

logger = logging.getLogger("tiledbsoma")


def main():
    parser = argparse.ArgumentParser(
        description="Outgest soma data from TileDB group structure to anndata/h5ad"
    )
    parser.add_argument(
        "-q", "--quiet", help="decrease output verbosity", action="store_true"
    )
    parser.add_argument(
        "-d", "--debug", help="increase output verbosity", action="store_true"
    )
    parser.add_argument(
        "-o",
        help="Specify output directory to contain the somas: default ./anndata-readback-tiledbsoma",
        type=str,
        default="./anndata-readback-tiledbsoma",
    )
    parser.add_argument(
        "--measurement-name",
        help="Which SOMA-experiment measurement name to write to the outgested anndata",
        type=str,
        default="RNA",
    )
    parser.add_argument(
        "--X-layer-name",
        help="Which X-layer measurement name to write as primary layer to the outgested anndata",
        type=str,
        default="data",
    )
    parser.add_argument(
        "--obs-id-name",
        help="Which obs column name to use as index for outgested andata",
        type=str,
        default=None,
    )
    parser.add_argument(
        "--var-id-name",
        help="Which var column name to use as index for outgested andata",
        type=str,
        default=None,
    )
    parser.add_argument(
        "paths",
        type=str,
        help="One for specified input with default output path, or two to specify input and output paths",
        nargs="*",
    )
    args = parser.parse_args()

    outdir = args.o.rstrip("/")

    if len(args.paths) == 0:
        input_path = "tiledbsoma-data/pbmc-small"
        output_path = os.path.join(outdir, "pbmc-small.h5ad")
    elif len(args.paths) == 1:
        # Strip trailing slashes so basename will behave correctly
        input_path = args.paths[0].rstrip("/")
        # Example 'tiledb-data/pbmc3k_processed' -> 'anndata-readcbak/pbmc3k_processed.h5ad'
        output_path = os.path.join(outdir, os.path.basename(input_path) + ".h5ad")
    elif len(args.paths) == 2:
        input_path = args.paths[0]
        output_path = args.paths[1]
    else:
        parser.print_help(file=sys.stderr)
        sys.exit(1)

    vfs = tiledb.VFS()
    if not vfs.is_dir(input_path):
        # Print this neatly and exit neatly, to avoid a multi-line stack trace otherwise.
        logging.error(f"Input path not found: {input_path}")
        sys.exit(1)

    # This is for local-disk use only -- for S3-backed tiledb://... URIs we should
    # use tiledb.vfs to remove any priors, and/or make use of a tiledb `overwrite` flag.
    if tiledbsoma._util.is_local_path(outdir):
        if not os.path.exists(outdir):
            os.mkdir(outdir)

    if args.debug:
        tiledbsoma.logging.debug()
    elif not args.quiet:
        tiledbsoma.logging.info()

    soma = tiledbsoma.Experiment.open(input_path)
    tiledbsoma.io.to_h5ad(
        soma,
        output_path,
        measurement_name=args.measurement_name,
        X_layer_name=args.X_layer_name,
        obs_id_name=args.obs_id_name,
        var_id_name=args.var_id_name,
    )

    logger.info(f"Wrote {output_path}")


if __name__ == "__main__":
    main()
