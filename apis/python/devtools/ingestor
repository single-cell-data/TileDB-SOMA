#!/usr/bin/env python

"""
A simple driver for ingestion of anndata to a TileDB Experiment.

* Invoke this with one argument /path/to/some/somename.h5ad:
  o Output will be ./tiledbsoma-data/somename

* Invoke this with two arguments to specify input anndata HDF5 file
  and output TileDB group.
"""

import argparse
import json
import os
import sys
from typing import Optional

from somacore import options

import tiledbsoma
import tiledbsoma._exception
import tiledbsoma._types
import tiledbsoma._util
import tiledbsoma.io
import tiledbsoma.logging
from tiledbsoma.options import SOMATileDBContext
import tiledb


# ================================================================
def main():
    parser = argparse.ArgumentParser(
        description="Ingest SOMA data from anndata/h5ad into TileDB group structure"
    )
    parser.add_argument(
        "-q", "--quiet", help="decrease output verbosity", action="store_true"
    )
    parser.add_argument(
        "--debug", help="increase output verbosity", action="store_true"
    )
    parser.add_argument(
        "--append",
        help="Append the inputs to the existing SOMA experiment",
        action="store_true",
    )
    parser.add_argument(
        "--ingest-mode",
        help="""Write mode (the default) writes all data, creating new layers if the soma already exists.

Resume mode skip data writes if data are within MBRs of the existing soma.
This is useful for continuing after a partial/interrupted previous upload.

Schema-only mode creates groups and array schema, without writing array data.
This is useful as a prep-step for parallel append-ingest of multiple H5ADs to a single soma.""",
        choices=["write", "schema_only", "schema-only", "resume"],
        default=["write"],
        nargs=1,
    )
    parser.add_argument(
        "-n",
        help="All arguments after flags are treated as input paths",
        action="store_true",
    )
    parser.add_argument(
        "-o",
        help="Specify output directory to contain the SOMAs",
        type=str,
        default=".",
    )
    parser.add_argument(
        "--measurement-name",
        help="SOMA-experiment measurement name to associate with the ingested anndata",
        type=str,
        default="RNA",
    )
    parser.add_argument(
        "--soco",
        help="Write the SOMA and also append to a Collection there",
        action="store_true",
    )
    parser.add_argument(
        "-r",
        "--relative",
        help="""
* If `false` then the group will remember the absolute paths of each member array/subgroup. For
ingesting to TileDB Cloud, this is necessary.

* If `true` then the group will have the relative pth of the member. For TileDB Cloud, this
is never the right thing to do. For local-disk storage, this is essential if you want to move
a SOMA to another directory and have it be able access its members.

* If `auto`, then we select `relative=False` if the URI starts with `tiledb://`, else we
select `relative=True`. (This is the default.)
""",
        choices=["true", "false", "auto"],
        nargs=1,
    )
    parser.add_argument(
        "--tiledb-config-file",
        help="""TileDB config data from `config.save()`, in a file.

Given a tiledb.Config object `cfg`, you can do `cfg.save("mycfg.txt")`.
It'll look like this:

    ...
    config.logging_level 0
    filestore.buffer_size 104857600
    rest.curl.buffer_size 524288
    ...

Then you can edit it if you like. Then you can have this script read it
using `--tiledb-config-file mycfg.txt`.
""",
        type=str,
        default=None,
    )
    parser.add_argument(
        "--platform-config-file",
        help="""Platform-config data as JSON, in a file.

Given a PlatformConfig object -- just a nested dict -- named `platform_config` you can do

    import json
    with open("pc.json", "w") as F:
        json.dump(platform_config, F)

Then you can edit it if you like. Then you can have this script read it
using `--platform-config-file pc.json`.
""",
        type=str,
        default=None,
    )
    parser.add_argument(
        "paths",
        type=str,
        help="One for specified input with default output path, or two to specify input and output paths, or multiple input paths if -n is specified",
        nargs="*",
    )
    args = parser.parse_args()

    write_soco = args.soco
    if args.debug:
        tiledbsoma.logging.debug()
    elif not args.quiet:
        tiledbsoma.logging.info()

    if args.relative is None:
        use_relative_uri = None
    else:
        relative = args.relative[0]
        if relative == "true":
            use_relative_uri = True
        elif relative == "false":
            use_relative_uri = False
        elif relative == "auto":
            use_relative_uri = None
        else:
            raise tiledbsoma._exception.SOMAError(
                f"Internal coding error in {__file__}"
            )

    context = SOMATileDBContext()
    if args.tiledb_config_file is not None:
        cfg = tiledb.Config().load(args.tiledb_config_file)
        ctx = tiledb.Ctx(cfg)
        context = SOMATileDBContext(tiledb_ctx=ctx)

    platform_config = None
    if args.platform_config_file is not None:
        with open(args.platform_config_file) as F:
            platform_config = json.load(F)

    soco_dir = args.o.rstrip("/")

    if args.n:
        if len(args.paths) < 1:
            parser.print_help(file=sys.stderr)
            sys.exit(1)
        for input_path in args.paths:
            # Example 'testdata/pbmc3k_processed.h5ad' -> 'tiledbsoma-data/pbmc3k_processed'
            output_path = os.path.join(
                soco_dir, os.path.splitext(os.path.basename(input_path))[0]
            )
            ingest_one(
                input_path=input_path,
                output_path=output_path,
                ingest_mode=args.ingest_mode[0],
                context=context,
                platform_config=platform_config,
                use_relative_uri=use_relative_uri,
                write_soco=write_soco,
                soco_dir=soco_dir,
                measurement_name=args.measurement_name,
                appending=args.append,
            )
    else:
        if len(args.paths) == 0:
            input_path = "testdata/pbmc-small.h5ad"
            output_path = os.path.join(soco_dir, "pbmc-small")
            ingest_one(
                input_path=input_path,
                output_path=output_path,
                ingest_mode=args.ingest_mode[0],
                context=context,
                platform_config=platform_config,
                use_relative_uri=use_relative_uri,
                write_soco=write_soco,
                soco_dir=soco_dir,
                measurement_name=args.measurement_name,
                appending=args.append,
            )
        elif len(args.paths) == 1:
            input_path = args.paths[0]
            # Example 'testdata/pbmc3k_processed.h5ad' -> 'tiledbsoma-data/pbmc3k_processed'
            output_path = os.path.join(
                soco_dir, os.path.splitext(os.path.basename(input_path))[0]
            )
            ingest_one(
                input_path=input_path,
                output_path=output_path,
                ingest_mode=args.ingest_mode[0],
                context=context,
                platform_config=platform_config,
                use_relative_uri=use_relative_uri,
                write_soco=write_soco,
                soco_dir=soco_dir,
                measurement_name=args.measurement_name,
                appending=args.append,
            )
        elif len(args.paths) == 2:
            input_path = args.paths[0]
            output_path = args.paths[1]
            ingest_one(
                input_path=input_path,
                output_path=output_path,
                ingest_mode=args.ingest_mode[0],
                context=context,
                platform_config=platform_config,
                use_relative_uri=use_relative_uri,
                write_soco=write_soco,
                soco_dir=soco_dir,
                measurement_name=args.measurement_name,
                appending=args.append,
            )
        else:
            parser.print_help(file=sys.stderr)
            sys.exit(1)


# ================================================================
def ingest_one(
    *,
    input_path: str,
    output_path: str,
    ingest_mode: str,
    context: SOMATileDBContext,
    platform_config: Optional[options.PlatformConfig],
    use_relative_uri: Optional[bool],
    write_soco: bool,
    soco_dir: str,
    measurement_name: str,
    appending: bool,
):
    # This will be a very common command-line thing to do since the arg is `--ingest-mode` not
    # `--ingest_mode`. Let's be kind and supportive about it.
    if ingest_mode == "schema-only":
        ingest_mode = "schema_only"

    if ingest_mode not in tiledbsoma._types.INGEST_MODES:
        raise tiledbsoma._exception.SOMAError(
            f'expected ingest_mode to be one of {tiledbsoma._types.INGEST_MODES}; got "{ingest_mode}"'
        )

    # Check that the input exists.
    vfs = tiledb.VFS()
    if not vfs.is_file(input_path):
        # Print this neatly and exit neatly, to avoid a multi-line stack trace otherwise.
        tiledbsoma.logging.logger.error(f"Input path not found: {input_path}")
        sys.exit(1)

    # Prepare to write the output.
    # This is for local-disk use only -- for S3-backed tiledb://... URIs we should
    # use tiledb.vfs to remove any priors, and/or make use of a tiledb `overwrite` flag.
    parent = os.path.dirname(output_path.rstrip("/"))
    if parent != "":
        if tiledbsoma._util.is_local_path(parent):
            if not os.path.exists(parent):
                os.mkdir(parent)

    exp_name = os.path.splitext(os.path.basename(output_path))[0]

    rd = None
    if appending:
        rd = tiledbsoma.io.register_h5ads(
            experiment_uri=output_path,
            h5ad_file_names=[input_path],
            measurement_name=measurement_name,
            obs_field_name="obs_id",
            var_field_name="var_id",
            context=context,
        )

    uri = tiledbsoma.io.from_h5ad(
        output_path,
        input_path,
        measurement_name,
        ingest_mode=ingest_mode,
        context=context,
        platform_config=platform_config,
        use_relative_uri=use_relative_uri,
        registration_mapping=rd,
    )

    if write_soco:
        try:
            soco = tiledbsoma.Collection.open(soco_dir, "w", context=context)
        except tiledbsoma.DoesNotExistError:
            soco = tiledbsoma.Collection.create(soco_dir, context=context)
        exp = tiledbsoma.Experiment.open(uri)
        soco.set(exp_name, exp, use_relative_uri=use_relative_uri)
        exp.close()

        tiledbsoma.logging.logger.info("")
        tiledbsoma.logging.logger.info(
            f"Added Experiment {exp_name} to Collection {soco_dir}"
        )


# ================================================================
if __name__ == "__main__":
    main()
