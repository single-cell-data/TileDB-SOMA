% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SOMASparseNDArray.R
\name{SOMASparseNDArray}
\alias{SOMASparseNDArray}
\title{SOMA Sparse Nd-Array}
\description{
\code{SOMASparseNDArray} is a sparse, N-dimensional array with
offset (zero-based) integer indexing on each dimension. The
\code{SOMASparseNDArray} has a user-defined schema, which includes:
\itemize{
\item \code{type}: a \code{primitive} type, expressed as an Arrow type
(e.g., \code{\link[arrow]{int64}}, \code{\link[arrow]{float32}}, etc),
indicating the type of data contained within the array.
\item \code{shape}: the shape of the array, i.e., number and length of each
dimension. This is a soft limit which can be increased using
\code{$resize()} up to the \code{maxshape}.
\item \code{maxshape}: the hard limit up to which \code{shape} may be
increased using \code{$resize()}.
}
All dimensions must have a positive, non-zero length.
}
\note{
In TileDB this is an sparse array with \code{N} \code{int64} dimensions
of domain \code{[0, maxInt64)} and a single attribute.
}
\section{Duplicate Writes}{

As duplicate index values are not allowed, index values already present in
the object are overwritten and new index values are added
(lifecycle: maturing).
}

\examples{
\dontshow{if (requireNamespace("withr", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
uri <- withr::local_tempfile(pattern = "soma-sparse-array")
mat <- Matrix::rsparsematrix(100L, 100L, 0.7, repr = "T")
mat[1:3, 1:5]

(arr <- SOMASparseNDArrayCreate(uri, arrow::float64(), shape = dim(mat)))
arr$write(mat)
arr$close()

(arr <- SOMASparseNDArrayOpen(uri))
m2 <- arr$read()$sparse_matrix()$concat()
m2[1:3, 1:5]
\dontshow{
arr$close()
}
\dontshow{\}) # examplesIf}
}
\section{Super classes}{
\code{\link[tiledbsoma:SOMAObject]{tiledbsoma::SOMAObject}} -> \code{\link[tiledbsoma:SOMAArrayBase]{tiledbsoma::SOMAArrayBase}} -> \code{\link[tiledbsoma:SOMANDArrayBase]{tiledbsoma::SOMANDArrayBase}} -> \code{SOMASparseNDArray}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SOMASparseNDArray-read}{\code{SOMASparseNDArray$read()}}
\item \href{#method-SOMASparseNDArray-write}{\code{SOMASparseNDArray$write()}}
\item \href{#method-SOMASparseNDArray-nnz}{\code{SOMASparseNDArray$nnz()}}
\item \href{#method-SOMASparseNDArray-.write_coordinates}{\code{SOMASparseNDArray$.write_coordinates()}}
\item \href{#method-SOMASparseNDArray-clone}{\code{SOMASparseNDArray$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAObject" data-id="class"><a href='../../tiledbsoma/html/SOMAObject.html#method-SOMAObject-class'><code>tiledbsoma::SOMAObject$class()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAObject" data-id="exists"><a href='../../tiledbsoma/html/SOMAObject.html#method-SOMAObject-exists'><code>tiledbsoma::SOMAObject$exists()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAObject" data-id="get_metadata"><a href='../../tiledbsoma/html/SOMAObject.html#method-SOMAObject-get_metadata'><code>tiledbsoma::SOMAObject$get_metadata()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAObject" data-id="initialize"><a href='../../tiledbsoma/html/SOMAObject.html#method-SOMAObject-initialize'><code>tiledbsoma::SOMAObject$initialize()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAObject" data-id="is_open"><a href='../../tiledbsoma/html/SOMAObject.html#method-SOMAObject-is_open'><code>tiledbsoma::SOMAObject$is_open()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAObject" data-id="mode"><a href='../../tiledbsoma/html/SOMAObject.html#method-SOMAObject-mode'><code>tiledbsoma::SOMAObject$mode()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAObject" data-id="reopen"><a href='../../tiledbsoma/html/SOMAObject.html#method-SOMAObject-reopen'><code>tiledbsoma::SOMAObject$reopen()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAObject" data-id="set_metadata"><a href='../../tiledbsoma/html/SOMAObject.html#method-SOMAObject-set_metadata'><code>tiledbsoma::SOMAObject$set_metadata()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="allows_duplicates"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-allows_duplicates'><code>tiledbsoma::SOMAArrayBase$allows_duplicates()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="attributes"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-attributes'><code>tiledbsoma::SOMAArrayBase$attributes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="attrnames"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-attrnames'><code>tiledbsoma::SOMAArrayBase$attrnames()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="close"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-close'><code>tiledbsoma::SOMAArrayBase$close()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="colnames"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-colnames'><code>tiledbsoma::SOMAArrayBase$colnames()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="dimensions"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-dimensions'><code>tiledbsoma::SOMAArrayBase$dimensions()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="dimnames"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-dimnames'><code>tiledbsoma::SOMAArrayBase$dimnames()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="index_column_names"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-index_column_names'><code>tiledbsoma::SOMAArrayBase$index_column_names()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="is_sparse"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-is_sparse'><code>tiledbsoma::SOMAArrayBase$is_sparse()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="maxshape"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-maxshape'><code>tiledbsoma::SOMAArrayBase$maxshape()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="ndim"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-ndim'><code>tiledbsoma::SOMAArrayBase$ndim()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="non_empty_domain"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-non_empty_domain'><code>tiledbsoma::SOMAArrayBase$non_empty_domain()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="open"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-open'><code>tiledbsoma::SOMAArrayBase$open()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="print"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-print'><code>tiledbsoma::SOMAArrayBase$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="schema"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-schema'><code>tiledbsoma::SOMAArrayBase$schema()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="shape"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-shape'><code>tiledbsoma::SOMAArrayBase$shape()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMANDArrayBase" data-id="create"><a href='../../tiledbsoma/html/SOMANDArrayBase.html#method-SOMANDArrayBase-create'><code>tiledbsoma::SOMANDArrayBase$create()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMANDArrayBase" data-id="resize"><a href='../../tiledbsoma/html/SOMANDArrayBase.html#method-SOMANDArrayBase-resize'><code>tiledbsoma::SOMANDArrayBase$resize()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMANDArrayBase" data-id="set_data_type"><a href='../../tiledbsoma/html/SOMANDArrayBase.html#method-SOMANDArrayBase-set_data_type'><code>tiledbsoma::SOMANDArrayBase$set_data_type()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMANDArrayBase" data-id="tiledbsoma_has_upgraded_shape"><a href='../../tiledbsoma/html/SOMANDArrayBase.html#method-SOMANDArrayBase-tiledbsoma_has_upgraded_shape'><code>tiledbsoma::SOMANDArrayBase$tiledbsoma_has_upgraded_shape()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMANDArrayBase" data-id="tiledbsoma_upgrade_shape"><a href='../../tiledbsoma/html/SOMANDArrayBase.html#method-SOMANDArrayBase-tiledbsoma_upgrade_shape'><code>tiledbsoma::SOMANDArrayBase$tiledbsoma_upgrade_shape()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMASparseNDArray-read"></a>}}
\if{latex}{\out{\hypertarget{method-SOMASparseNDArray-read}{}}}
\subsection{Method \code{read()}}{
Reads a user-defined slice of the \code{SOMASparseNDArray}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMASparseNDArray$read(
  coords = NULL,
  result_order = "auto",
  log_level = "auto"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{coords}}{Optional \code{list} of integer vectors, one for each
dimension, with a length equal to the number of values to read. If
\code{NULL}, all values are read. List elements can be named when
specifying a subset of dimensions.}

\item{\code{result_order}}{Optional order of read results. This can be one of either
\verb{"ROW_MAJOR, }"COL_MAJOR"\verb{, or }"auto"` (default).}

\item{\code{log_level}}{Optional logging level with default value of
\dQuote{\code{warn}}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \link{SOMASparseNDArrayRead}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMASparseNDArray-write"></a>}}
\if{latex}{\out{\hypertarget{method-SOMASparseNDArray-write}{}}}
\subsection{Method \code{write()}}{
Write matrix-like data to the array (lifecycle: maturing).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMASparseNDArray$write(values, bbox = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{values}}{Any \code{matrix}-like object coercible to a
\code{\link[Matrix:TsparseMatrix-class]{TsparseMatrix}}. Character
dimension names are ignored because \code{SOMANDArray}s use integer
indexing.}

\item{\code{bbox}}{A vector of integers describing the upper bounds of each
dimension of \code{values}. Generally should be \code{NULL}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns \code{self}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMASparseNDArray-nnz"></a>}}
\if{latex}{\out{\hypertarget{method-SOMASparseNDArray-nnz}{}}}
\subsection{Method \code{nnz()}}{
Retrieve number of non-zero elements (lifecycle: maturing).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMASparseNDArray$nnz()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A scalar with the number of non-zero elements.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMASparseNDArray-.write_coordinates"></a>}}
\if{latex}{\out{\hypertarget{method-SOMASparseNDArray-.write_coordinates}{}}}
\subsection{Method \code{.write_coordinates()}}{
Write a COO table to the array.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMASparseNDArray$.write_coordinates(values)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{values}}{A \code{data.frame} or \link[arrow:Table]{Arrow table}
with data in COO format; must be named with the dimension and attribute
labels of the array.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns \code{self}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMASparseNDArray-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SOMASparseNDArray-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMASparseNDArray$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
