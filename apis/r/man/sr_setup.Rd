% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{sr_setup}
\alias{sr_setup}
\alias{sr_complete}
\alias{sr_next}
\title{Iterator-Style Access to SOMA Array via SOMAArrayReader}
\usage{
sr_setup(
  uri,
  config,
  colnames = NULL,
  qc = NULL,
  dim_points = NULL,
  dim_ranges = NULL,
  loglevel = "auto"
)

sr_complete(sr)

sr_next(sr)
}
\arguments{
\item{uri}{Character value with URI path to a SOMA data set}

\item{config}{Named chracter vector with \sQuote{key} and \sQuote{value} pairs
used as TileDB config parameters.}

\item{colnames}{Optional vector of character value with the name of the columns to retrieve}

\item{qc}{Optional external Pointer object to TileDB Query Condition, defaults to \sQuote{NULL} i.e.
no query condition}

\item{dim_points}{Optional named list with vector of data points to select on the given
dimension(s). Each dimension can be one entry in the list.}

\item{dim_ranges}{Optional named list with two-column matrix where each row select a range
for the given dimension. Each dimension can be one entry in the list.}

\item{loglevel}{Character value with the desired logging level, defaults to \sQuote{auto}
which lets prior setting prevail, any other value is set as new logging level.}

\item{sr}{An external pointer to a TileDB SOMAArrayReader object}
}
\value{
\code{sr_setup} returns an external pointer to a SOMAArrayReader. \code{sr_complete}
returns a boolean, and \code{sr_next} returns an Arrow array helper object.
}
\description{
The \verb{sr_*} functions provide low-level access to an instance of the SOMAArrayReader
class so that iterative access over parts of a (large) array is possible.
\describe{
\item{\code{sr_setup}}{instantiates and by default also submits a query}
\item{\code{sr_complete}}{checks if more data is available}
\item{\code{sr_next}}{returns the next chunk}
}
}
\examples{
\dontrun{
ctx <- tiledb::tiledb_ctx()
uri <- "test/soco/pbmc3k_processed/obs"
sr <- sr_setup(uri, config=as.character(tiledb::config(ctx)), loglevel="warn")
rl <- data.frame()
while (!sr_complete(sr)) {
    sr |>
        sr_next() |>
        as_arrow_table() |>
        collect() |>
        as.data.frame() |>
        data.table() -> D
    rl <- rbind(rl, D)
}
summary(rl)
}
}
