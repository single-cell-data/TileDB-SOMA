% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SOMADataFrame.R
\name{SOMADataFrame}
\alias{SOMADataFrame}
\title{SOMADataFrame}
\description{
A SOMA data frame  is a multi-column table that must contain a
column called \dQuote{\code{soma_joinid}} of type \code{int64}, which
contains a unique value for each row and is intended to act as a join key for
other objects, such as \code{\link{SOMASparseNDArray}} (lifecycle: maturing).
}
\examples{
\dontshow{if (requireNamespace("withr", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
uri <- withr::local_tempfile(pattern = "soma-data-frame")
df <- data.frame(
  soma_joinid = bit64::seq.integer64(0L, 99L),
  group = sample(factor(c("g1", "g2")), size = 100L, replace = TRUE),
  nCount = stats::rbinom(100L, 10L, 0.3)
)
(sch <- arrow::infer_schema(df))
(sdf <- SOMADataFrameCreate(uri, sch, domain = list(soma_joinid = c(0, 100))))
sdf$write(arrow::as_arrow_table(df, schema = sch))
sdf$close()

(sdf <- SOMADataFrameOpen(uri))
head(as.data.frame(sdf$read()$concat()))
\dontshow{
sdf$close()
}
\dontshow{\}) # examplesIf}
}
\section{Super classes}{
\code{\link[tiledbsoma:SOMAObject]{tiledbsoma::SOMAObject}} -> \code{\link[tiledbsoma:SOMAArrayBase]{tiledbsoma::SOMAArrayBase}} -> \code{SOMADataFrame}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SOMADataFrame-create}{\code{SOMADataFrame$create()}}
\item \href{#method-SOMADataFrame-write}{\code{SOMADataFrame$write()}}
\item \href{#method-SOMADataFrame-read}{\code{SOMADataFrame$read()}}
\item \href{#method-SOMADataFrame-update}{\code{SOMADataFrame$update()}}
\item \href{#method-SOMADataFrame-levels}{\code{SOMADataFrame$levels()}}
\item \href{#method-SOMADataFrame-shape}{\code{SOMADataFrame$shape()}}
\item \href{#method-SOMADataFrame-maxshape}{\code{SOMADataFrame$maxshape()}}
\item \href{#method-SOMADataFrame-domain}{\code{SOMADataFrame$domain()}}
\item \href{#method-SOMADataFrame-maxdomain}{\code{SOMADataFrame$maxdomain()}}
\item \href{#method-SOMADataFrame-tiledbsoma_has_upgraded_domain}{\code{SOMADataFrame$tiledbsoma_has_upgraded_domain()}}
\item \href{#method-SOMADataFrame-tiledbsoma_resize_soma_joinid_shape}{\code{SOMADataFrame$tiledbsoma_resize_soma_joinid_shape()}}
\item \href{#method-SOMADataFrame-tiledbsoma_upgrade_domain}{\code{SOMADataFrame$tiledbsoma_upgrade_domain()}}
\item \href{#method-SOMADataFrame-change_domain}{\code{SOMADataFrame$change_domain()}}
\item \href{#method-SOMADataFrame-clone}{\code{SOMADataFrame$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAObject" data-id="class"><a href='../../tiledbsoma/html/SOMAObject.html#method-SOMAObject-class'><code>tiledbsoma::SOMAObject$class()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAObject" data-id="exists"><a href='../../tiledbsoma/html/SOMAObject.html#method-SOMAObject-exists'><code>tiledbsoma::SOMAObject$exists()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAObject" data-id="get_metadata"><a href='../../tiledbsoma/html/SOMAObject.html#method-SOMAObject-get_metadata'><code>tiledbsoma::SOMAObject$get_metadata()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAObject" data-id="initialize"><a href='../../tiledbsoma/html/SOMAObject.html#method-SOMAObject-initialize'><code>tiledbsoma::SOMAObject$initialize()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAObject" data-id="is_open"><a href='../../tiledbsoma/html/SOMAObject.html#method-SOMAObject-is_open'><code>tiledbsoma::SOMAObject$is_open()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAObject" data-id="mode"><a href='../../tiledbsoma/html/SOMAObject.html#method-SOMAObject-mode'><code>tiledbsoma::SOMAObject$mode()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAObject" data-id="reopen"><a href='../../tiledbsoma/html/SOMAObject.html#method-SOMAObject-reopen'><code>tiledbsoma::SOMAObject$reopen()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAObject" data-id="set_metadata"><a href='../../tiledbsoma/html/SOMAObject.html#method-SOMAObject-set_metadata'><code>tiledbsoma::SOMAObject$set_metadata()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="allows_duplicates"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-allows_duplicates'><code>tiledbsoma::SOMAArrayBase$allows_duplicates()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="attributes"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-attributes'><code>tiledbsoma::SOMAArrayBase$attributes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="attrnames"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-attrnames'><code>tiledbsoma::SOMAArrayBase$attrnames()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="close"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-close'><code>tiledbsoma::SOMAArrayBase$close()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="colnames"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-colnames'><code>tiledbsoma::SOMAArrayBase$colnames()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="dimensions"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-dimensions'><code>tiledbsoma::SOMAArrayBase$dimensions()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="dimnames"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-dimnames'><code>tiledbsoma::SOMAArrayBase$dimnames()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="index_column_names"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-index_column_names'><code>tiledbsoma::SOMAArrayBase$index_column_names()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="is_sparse"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-is_sparse'><code>tiledbsoma::SOMAArrayBase$is_sparse()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="ndim"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-ndim'><code>tiledbsoma::SOMAArrayBase$ndim()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="non_empty_domain"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-non_empty_domain'><code>tiledbsoma::SOMAArrayBase$non_empty_domain()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="open"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-open'><code>tiledbsoma::SOMAArrayBase$open()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="print"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-print'><code>tiledbsoma::SOMAArrayBase$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="SOMAArrayBase" data-id="schema"><a href='../../tiledbsoma/html/SOMAArrayBase.html#method-SOMAArrayBase-schema'><code>tiledbsoma::SOMAArrayBase$schema()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMADataFrame-create"></a>}}
\if{latex}{\out{\hypertarget{method-SOMADataFrame-create}{}}}
\subsection{Method \code{create()}}{
Create a SOMA data frame (lifecycle: maturing).\cr
\cr
\strong{Note}: \code{$create()} is considered internal and should not be
called directly; use factory functions
(eg. \code{\link{SOMADataFrameCreate}()}) instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMADataFrame$create(
  schema,
  index_column_names = c("soma_joinid"),
  domain = NULL,
  platform_config = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{schema}}{An \link[arrow:schema]{Arrow schema}.}

\item{\code{index_column_names}}{A vector of column names to use as user-defined
index columns. All named columns must exist in the schema, and at least
one index column name is required.}

\item{\code{domain}}{An optional list specifying the domain of each
index column. Each slot in the list must have its name being the name
of an index column, and its value being be a length-two vector
consisting of the minimum and maximum values storable in the index
column. For example, if there is a single int64-valued index column
\code{soma_joinid}, then \code{domain} might be
\code{list(soma_joinid=c(100, 200))} to indicate that values between 100
and 200, inclusive, can be stored in that column.  If provided, this
sequence must have the same length as \code{index_column_names}, and the
index-column domain will be as specified.  If omitted entirely, or if
\code{NULL} in a given dimension, the corresponding index-column domain
will use an empty range, and data writes after that will fail with
\dQuote{A range was set outside of the current domain}. Unless you have
a particular reason not to, you should always provide the desired
\code{domain} at create time: this is an optional but strongly
recommended parameter. See also \code{change_domain} which allows you to
expand the domain after create.}

\item{\code{platform_config}}{A \link[tiledbsoma:PlatformConfig]{platform configuration}
object}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Returns \code{self}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMADataFrame-write"></a>}}
\if{latex}{\out{\hypertarget{method-SOMADataFrame-write}{}}}
\subsection{Method \code{write()}}{
Write values to the data frame (lifecycle: maturing).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMADataFrame$write(values)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{values}}{An \link[arrow:Table]{Arrow table} or
\link[arrow:RecordBatch]{Arrow record batch} containing all columns,
including any index columns. The schema for \code{values} must match the
schema for the data frame.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns \code{self}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMADataFrame-read"></a>}}
\if{latex}{\out{\hypertarget{method-SOMADataFrame-read}{}}}
\subsection{Method \code{read()}}{
Read a user-defined subset of data, addressed by the
data frame indexing column, and optionally filtered
(lifecycle: maturing).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMADataFrame$read(
  coords = NULL,
  column_names = NULL,
  value_filter = NULL,
  result_order = "auto",
  log_level = "auto"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{coords}}{Optional named list of indices specifying the rows to read;
each (named) list element corresponds to a dimension of the same name.}

\item{\code{column_names}}{Optional character vector of column names to return.}

\item{\code{value_filter}}{Optional string containing a logical expression that
is used to filter the returned values. See
\code{\link[tiledb:parse_query_condition]{tiledb::parse_query_condition}()}
for more information.}

\item{\code{result_order}}{Optional order of read results. This can be one of either
\verb{"ROW_MAJOR, }"COL_MAJOR"\verb{, or }"auto"` (default).}

\item{\code{log_level}}{Optional logging level with default value of
\dQuote{\code{warn}}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An \link[arrow:Table]{Arrow table} or \code{\link{TableReadIter}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMADataFrame-update"></a>}}
\if{latex}{\out{\hypertarget{method-SOMADataFrame-update}{}}}
\subsection{Method \code{update()}}{
Update (lifecycle: maturing).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMADataFrame$update(values, row_index_name = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{values}}{A data frame, \link[arrow:Table]{Arrow table}, or
\link[arrow:RecordBatch]{Arrow record batch}.}

\item{\code{row_index_name}}{An optional scalar character. If provided, and if
the \code{values} argument is a data frame with row names, then the row
names will be extracted and added as a new column to the data frame
prior to performing the update. The name of this new column will be set
to the value specified by \code{row_index_name}.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update the existing \code{SOMADataFrame} to add or remove columns based
on the input:
\itemize{
\item columns present in the current the \code{SOMADataFrame} but absent
from the new \code{values} will be dropped.
\item columns absent in current \code{SOMADataFrame} but present in the
new \code{values} will be added.
\item any columns present in both will be left alone, with the
exception that if \code{values} has a different type for the column,
the entire update will fail because attribute types cannot be changed.
}
Furthermore, \code{values} must contain the same number of rows as the
current \code{SOMADataFrame}.
}

\subsection{Returns}{
Invisibly returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMADataFrame-levels"></a>}}
\if{latex}{\out{\hypertarget{method-SOMADataFrame-levels}{}}}
\subsection{Method \code{levels()}}{
Get the levels for an enumerated (\code{factor}) column.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMADataFrame$levels(column_names = NULL, simplify = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{column_names}}{Optional character vector of column names to pull
enumeration levels for; defaults to all enumerated columns.}

\item{\code{simplify}}{Simplify the result down to a vector or matrix.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
If \code{simplify} returns one of the following:
\itemize{
\item a vector of there is only one enumerated column.
\item a matrix if there are multiple enumerated columns with the same
number of levels.
\item a named list if there are multiple enumerated columns with
differing numbers of levels.
}
Otherwise, returns a named list.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMADataFrame-shape"></a>}}
\if{latex}{\out{\hypertarget{method-SOMADataFrame-shape}{}}}
\subsection{Method \code{shape()}}{
Retrieve the shape; as \code{SOMADataFrames} are shapeless,
simply raises an error.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMADataFrame$shape()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None, instead a \code{\link{.NotYetImplemented}()} error
is raised.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMADataFrame-maxshape"></a>}}
\if{latex}{\out{\hypertarget{method-SOMADataFrame-maxshape}{}}}
\subsection{Method \code{maxshape()}}{
Retrieve the max shape; as \code{SOMADataFrames} are
shapeless, simply raises an error.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMADataFrame$maxshape()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None, instead a \code{\link{.NotYetImplemented}()} error
is raised.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMADataFrame-domain"></a>}}
\if{latex}{\out{\hypertarget{method-SOMADataFrame-domain}{}}}
\subsection{Method \code{domain()}}{
Returns a named list of minimum/maximum pairs, one per index
column, currently storable on each index column of the data frame. These
can be resized up to \code{maxdomain} (lifecycle: maturing).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMADataFrame$domain()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Named list of minimum/maximum values.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMADataFrame-maxdomain"></a>}}
\if{latex}{\out{\hypertarget{method-SOMADataFrame-maxdomain}{}}}
\subsection{Method \code{maxdomain()}}{
Returns a named list of minimum/maximum pairs, one per index
column, which are the limits up to which the data frame can have its
domain resized (lifecycle: maturing).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMADataFrame$maxdomain()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Named list of minimum/maximum values.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMADataFrame-tiledbsoma_has_upgraded_domain"></a>}}
\if{latex}{\out{\hypertarget{method-SOMADataFrame-tiledbsoma_has_upgraded_domain}{}}}
\subsection{Method \code{tiledbsoma_has_upgraded_domain()}}{
Test if the array has the upgraded resizeable domain feature
from TileDB-SOMA 1.15, the array was created with this support, or it has
had \code{$upgrade_domain()} applied to it (lifecycle: maturing).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMADataFrame$tiledbsoma_has_upgraded_domain()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Returns \code{TRUE} if the array has the upgraded resizable
domain feature; otherwise, returns \code{FALSE}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMADataFrame-tiledbsoma_resize_soma_joinid_shape"></a>}}
\if{latex}{\out{\hypertarget{method-SOMADataFrame-tiledbsoma_resize_soma_joinid_shape}{}}}
\subsection{Method \code{tiledbsoma_resize_soma_joinid_shape()}}{
Increases the shape of the data frame on the
\code{soma_joinid} index column, if it indeed is an index column, leaving
all other index columns as-is. If the \code{soma_joinid} is not an index
column, no change is made. This is a special case of
\code{upgrade_domain()}, but simpler to keystroke, and
handles the most common case for data frame domain expansion. Raises an
error if the data frame doesn't already have a domain; in that case
please call \code{$tiledbsoma_upgrade_domain()}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMADataFrame$tiledbsoma_resize_soma_joinid_shape(new_shape)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{new_shape}}{An integer, greater than or equal to 1 + the
\code{soma_joinid} domain slot.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMADataFrame-tiledbsoma_upgrade_domain"></a>}}
\if{latex}{\out{\hypertarget{method-SOMADataFrame-tiledbsoma_upgrade_domain}{}}}
\subsection{Method \code{tiledbsoma_upgrade_domain()}}{
Allows you to set the domain of a \code{SOMADataFrame},
when the \code{SOMADataFrame} does not have a domain set yet. The
argument must be a list of pairs of low/high values for the desired
domain, one pair per index column. For string index columns, you must
offer the low/high pair as \code{c("", "")}, or as \code{NULL}. If
\code{check_only} is \code{True}, returns whether the operation would
succeed if attempted, or a reason why it would not. The domain being
requested must be contained within what \code{$maxdomain()} returns.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMADataFrame$tiledbsoma_upgrade_domain(new_domain, check_only = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{new_domain}}{A named list, keyed by index-column name, with values
being two-element vectors containing the desired lower and upper bounds
for the domain.}

\item{\code{check_only}}{If true, does not apply the operation, but only reports
whether it would have succeeded.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
If \code{check_only}, returns the empty string if no error is
detected, else a description of the error. Otherwise, invisibly returns
\code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMADataFrame-change_domain"></a>}}
\if{latex}{\out{\hypertarget{method-SOMADataFrame-change_domain}{}}}
\subsection{Method \code{change_domain()}}{
Allows you to set the domain of a \code{SOMADataFrame}, when
the \code{SOMADataFrame} already has a domain set yet. The argument must
be a list of pairs of low/high values for the desired domain, one pair
per index column. For string index columns, you must offer the low/high
pair as \code{c("", "")}, or as \code{NULL}. If \code{check_only} is
\code{True}, returns whether the operation would succeed if attempted,
or a reason why it would not. The return value from \code{domain} must be
contained within the requested \code{new_domain}, and the requested
\code{new_domain} must be contained within the return value from
\code{$maxdomain()} (lifecycle: maturing).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMADataFrame$change_domain(new_domain, check_only = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{new_domain}}{A named list, keyed by index-column name, with values
being two-element vectors containing the desired lower and upper bounds
for the domain.}

\item{\code{check_only}}{If true, does not apply the operation, but only reports
whether it would have succeeded.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
If \code{check_only}, returns the empty string if no error is
detected, else a description of the error. Otherwise, invisibly returns
\code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMADataFrame-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SOMADataFrame-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMADataFrame$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
