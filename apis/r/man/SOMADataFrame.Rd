% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SOMADataFrame.R
\name{SOMADataFrame}
\alias{SOMADataFrame}
\title{SOMADataFrame}
\description{
\code{SOMADataFrame} is a multi-column table that must contain a column
called \code{soma_joinid} of type \code{int64}, which contains a unique value for each
row and is intended to act as a join key for other objects, such as
\code{\link{SOMASparseNDArray}}.  (lifecycle: maturing)
}
\section{Super classes}{
\code{\link[tiledbsoma:TileDBObject]{tiledbsoma::TileDBObject}} -> \code{\link[tiledbsoma:TileDBArray]{tiledbsoma::TileDBArray}} -> \code{\link[tiledbsoma:SOMAArrayBase]{tiledbsoma::SOMAArrayBase}} -> \code{SOMADataFrame}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SOMADataFrame-create}{\code{SOMADataFrame$create()}}
\item \href{#method-SOMADataFrame-write}{\code{SOMADataFrame$write()}}
\item \href{#method-SOMADataFrame-read}{\code{SOMADataFrame$read()}}
\item \href{#method-SOMADataFrame-update}{\code{SOMADataFrame$update()}}
\item \href{#method-SOMADataFrame-shape}{\code{SOMADataFrame$shape()}}
\item \href{#method-SOMADataFrame-maxshape}{\code{SOMADataFrame$maxshape()}}
\item \href{#method-SOMADataFrame-tiledbsoma_has_upgraded_domain}{\code{SOMADataFrame$tiledbsoma_has_upgraded_domain()}}
\item \href{#method-SOMADataFrame-clone}{\code{SOMADataFrame$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="TileDBObject" data-id="class"><a href='../../tiledbsoma/html/TileDBObject.html#method-TileDBObject-class'><code>tiledbsoma::TileDBObject$class()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="TileDBObject" data-id="exists"><a href='../../tiledbsoma/html/TileDBObject.html#method-TileDBObject-exists'><code>tiledbsoma::TileDBObject$exists()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="TileDBObject" data-id="initialize"><a href='../../tiledbsoma/html/TileDBObject.html#method-TileDBObject-initialize'><code>tiledbsoma::TileDBObject$initialize()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="TileDBObject" data-id="is_open"><a href='../../tiledbsoma/html/TileDBObject.html#method-TileDBObject-is_open'><code>tiledbsoma::TileDBObject$is_open()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="TileDBObject" data-id="mode"><a href='../../tiledbsoma/html/TileDBObject.html#method-TileDBObject-mode'><code>tiledbsoma::TileDBObject$mode()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="TileDBObject" data-id="reopen"><a href='../../tiledbsoma/html/TileDBObject.html#method-TileDBObject-reopen'><code>tiledbsoma::TileDBObject$reopen()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="TileDBArray" data-id="attributes"><a href='../../tiledbsoma/html/TileDBArray.html#method-TileDBArray-attributes'><code>tiledbsoma::TileDBArray$attributes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="TileDBArray" data-id="attrnames"><a href='../../tiledbsoma/html/TileDBArray.html#method-TileDBArray-attrnames'><code>tiledbsoma::TileDBArray$attrnames()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="TileDBArray" data-id="close"><a href='../../tiledbsoma/html/TileDBArray.html#method-TileDBArray-close'><code>tiledbsoma::TileDBArray$close()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="TileDBArray" data-id="colnames"><a href='../../tiledbsoma/html/TileDBArray.html#method-TileDBArray-colnames'><code>tiledbsoma::TileDBArray$colnames()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="TileDBArray" data-id="dimensions"><a href='../../tiledbsoma/html/TileDBArray.html#method-TileDBArray-dimensions'><code>tiledbsoma::TileDBArray$dimensions()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="TileDBArray" data-id="dimnames"><a href='../../tiledbsoma/html/TileDBArray.html#method-TileDBArray-dimnames'><code>tiledbsoma::TileDBArray$dimnames()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="TileDBArray" data-id="fragment_count"><a href='../../tiledbsoma/html/TileDBArray.html#method-TileDBArray-fragment_count'><code>tiledbsoma::TileDBArray$fragment_count()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="TileDBArray" data-id="get_metadata"><a href='../../tiledbsoma/html/TileDBArray.html#method-TileDBArray-get_metadata'><code>tiledbsoma::TileDBArray$get_metadata()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="TileDBArray" data-id="index_column_names"><a href='../../tiledbsoma/html/TileDBArray.html#method-TileDBArray-index_column_names'><code>tiledbsoma::TileDBArray$index_column_names()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="TileDBArray" data-id="ndim"><a href='../../tiledbsoma/html/TileDBArray.html#method-TileDBArray-ndim'><code>tiledbsoma::TileDBArray$ndim()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="TileDBArray" data-id="non_empty_domain"><a href='../../tiledbsoma/html/TileDBArray.html#method-TileDBArray-non_empty_domain'><code>tiledbsoma::TileDBArray$non_empty_domain()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="TileDBArray" data-id="open"><a href='../../tiledbsoma/html/TileDBArray.html#method-TileDBArray-open'><code>tiledbsoma::TileDBArray$open()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="TileDBArray" data-id="print"><a href='../../tiledbsoma/html/TileDBArray.html#method-TileDBArray-print'><code>tiledbsoma::TileDBArray$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="TileDBArray" data-id="schema"><a href='../../tiledbsoma/html/TileDBArray.html#method-TileDBArray-schema'><code>tiledbsoma::TileDBArray$schema()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="TileDBArray" data-id="set_metadata"><a href='../../tiledbsoma/html/TileDBArray.html#method-TileDBArray-set_metadata'><code>tiledbsoma::TileDBArray$set_metadata()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="TileDBArray" data-id="tiledb_array"><a href='../../tiledbsoma/html/TileDBArray.html#method-TileDBArray-tiledb_array'><code>tiledbsoma::TileDBArray$tiledb_array()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="TileDBArray" data-id="tiledb_schema"><a href='../../tiledbsoma/html/TileDBArray.html#method-TileDBArray-tiledb_schema'><code>tiledbsoma::TileDBArray$tiledb_schema()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsoma" data-topic="TileDBArray" data-id="used_shape"><a href='../../tiledbsoma/html/TileDBArray.html#method-TileDBArray-used_shape'><code>tiledbsoma::TileDBArray$used_shape()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMADataFrame-create"></a>}}
\if{latex}{\out{\hypertarget{method-SOMADataFrame-create}{}}}
\subsection{Method \code{create()}}{
Create (lifecycle: maturing)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMADataFrame$create(
  schema,
  index_column_names = c("soma_joinid"),
  platform_config = NULL,
  internal_use_only = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{schema}}{an \code{\link[arrow:schema]{arrow::schema}}.}

\item{\code{index_column_names}}{A vector of column names to use as user-defined
index columns.  All named columns must exist in the schema, and at least
one index column name is required.}

\item{\code{platform_config}}{A \link[tiledbsoma:PlatformConfig]{platform configuration}
object}

\item{\code{internal_use_only}}{Character value to signal this is a 'permitted' call,
as \code{create()} is considered internal and should not be called directly.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMADataFrame-write"></a>}}
\if{latex}{\out{\hypertarget{method-SOMADataFrame-write}{}}}
\subsection{Method \code{write()}}{
Write (lifecycle: maturing)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMADataFrame$write(values)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{values}}{An \code{\link[arrow:Table-class]{arrow::Table}} or \code{\link[arrow:RecordBatch-class]{arrow::RecordBatch}}
containing all columns, including any index columns. The
schema for \code{values} must match the schema for the \code{SOMADataFrame}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMADataFrame-read"></a>}}
\if{latex}{\out{\hypertarget{method-SOMADataFrame-read}{}}}
\subsection{Method \code{read()}}{
Read (lifecycle: maturing)
Read a user-defined subset of data, addressed by the dataframe indexing
column, and optionally filtered.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMADataFrame$read(
  coords = NULL,
  column_names = NULL,
  value_filter = NULL,
  result_order = "auto",
  iterated = FALSE,
  log_level = "auto"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{coords}}{Optional named list of indices specifying the rows to read; each (named)
list element corresponds to a dimension of the same name.}

\item{\code{column_names}}{Optional character vector of column names to return.}

\item{\code{value_filter}}{Optional string containing a logical expression that is used
to filter the returned values. See \code{\link[tiledb:parse_query_condition]{tiledb::parse_query_condition}} for
more information.}

\item{\code{result_order}}{Optional order of read results. This can be one of either
\verb{"ROW_MAJOR, }"COL_MAJOR"\verb{, or }"auto"` (default).}

\item{\code{iterated}}{Option boolean indicated whether data is read in call (when
\code{FALSE}, the default value) or in several iterated steps.}

\item{\code{log_level}}{Optional logging level with default value of \code{"warn"}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
arrow::\link[arrow]{Table} or \link{TableReadIter}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMADataFrame-update"></a>}}
\if{latex}{\out{\hypertarget{method-SOMADataFrame-update}{}}}
\subsection{Method \code{update()}}{
Update (lifecycle: maturing)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMADataFrame$update(values, row_index_name = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{values}}{A \code{data.frame}, \code{\link[arrow:Table-class]{arrow::Table}}, or
\code{\link[arrow:RecordBatch-class]{arrow::RecordBatch}}.}

\item{\code{row_index_name}}{An optional scalar character. If provided, and if
the \code{values} argument is a \code{data.frame} with row names, then the row
names will be extracted and added as a new column to the \code{data.frame}
prior to performing the update. The name of this new column will be set
to the value specified by \code{row_index_name}.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Update the existing \code{SOMADataFrame} to add or remove columns based on the
input:
\itemize{
\item columns present in the current the \code{SOMADataFrame} but absent from the
new \code{values} will be dropped
\item columns absent in current \code{SOMADataFrame} but present in the new
\code{values} will be added
\item any columns present in both will be left alone, with the exception that
if \code{values} has a different type for the column, the entire update
will fail because attribute types cannot be changed.
}

Furthermore, \code{values} must contain the same number of rows as the current
\code{SOMADataFrame}.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMADataFrame-shape"></a>}}
\if{latex}{\out{\hypertarget{method-SOMADataFrame-shape}{}}}
\subsection{Method \code{shape()}}{
Retrieve the shape; as \code{SOMADataFrames} are shapeless,
simply raises an error
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMADataFrame$shape()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None, instead a \code{\link{.NotYetImplemented}()} error is raised
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMADataFrame-maxshape"></a>}}
\if{latex}{\out{\hypertarget{method-SOMADataFrame-maxshape}{}}}
\subsection{Method \code{maxshape()}}{
Retrieve the maxshape; as \code{SOMADataFrames} are shapeless,
simply raises an error
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMADataFrame$maxshape()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None, instead a \code{\link{.NotYetImplemented}()} error is raised
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMADataFrame-tiledbsoma_has_upgraded_domain"></a>}}
\if{latex}{\out{\hypertarget{method-SOMADataFrame-tiledbsoma_has_upgraded_domain}{}}}
\subsection{Method \code{tiledbsoma_has_upgraded_domain()}}{
Returns TRUE if the array has the upgraded resizeable domain
feature from TileDB-SOMA 1.14: the array was created with this support,
or it has had \code{upgrade_domain} applied to it.
(lifecycle: maturing)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMADataFrame$tiledbsoma_has_upgraded_domain()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Logical
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMADataFrame-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SOMADataFrame-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMADataFrame$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
