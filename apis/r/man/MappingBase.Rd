% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MappingBase.R
\name{MappingBase}
\alias{MappingBase}
\alias{[[.MappingBase}
\alias{[[<-.MappingBase}
\alias{as.list.MappingBase}
\alias{length.MappingBase}
\alias{names.MappingBase}
\title{R6 Base Mapping Type}
\usage{
\method{[[}{MappingBase}(x, i, ..., default = NULL)

\method{[[}{MappingBase}(x, i, ...) <- value

\method{as.list}{MappingBase}(x, ...)

\method{length}{MappingBase}(x)

\method{names}{MappingBase}(x)
}
\arguments{
\item{x}{A mapping object}

\item{i}{A key to fetch or set; see \code{$get()} or \code{$set()}
methods below}

\item{...}{Ignored}

\item{default}{Default value to fetch if \code{i} is not found;
defaults to \code{NULL}}

\item{value}{Value to add for \code{i}, or \code{NULL} to remove
the entry for \code{i}}
}
\value{
\code{[[}: The value of \code{i} in the map, or \code{default} if
\code{i} is not found

\code{[[<-}: \code{x} with \code{value} added as \code{i}

\code{as.list}: The map as a list

\code{length}: The number of items in the map

\code{names}: The keys of the map
}
\description{
Virtual base mapping type for R6 objects; defines internal data structure
(\code{private$.data}) as a named list along with behavior methods for
getting (\code{self$get()}) and setting (\code{self$set()}) items in the map
}
\keyword{internal}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-MappingBase-new}{\code{MappingBase$new()}}
\item \href{#method-MappingBase-keys}{\code{MappingBase$keys()}}
\item \href{#method-MappingBase-values}{\code{MappingBase$values()}}
\item \href{#method-MappingBase-items}{\code{MappingBase$items()}}
\item \href{#method-MappingBase-get}{\code{MappingBase$get()}}
\item \href{#method-MappingBase-set}{\code{MappingBase$set()}}
\item \href{#method-MappingBase-setv}{\code{MappingBase$setv()}}
\item \href{#method-MappingBase-remove}{\code{MappingBase$remove()}}
\item \href{#method-MappingBase-update}{\code{MappingBase$update()}}
\item \href{#method-MappingBase-length}{\code{MappingBase$length()}}
\item \href{#method-MappingBase-to_list}{\code{MappingBase$to_list()}}
\item \href{#method-MappingBase-print}{\code{MappingBase$print()}}
\item \href{#method-MappingBase-clone}{\code{MappingBase$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MappingBase-new"></a>}}
\if{latex}{\out{\hypertarget{method-MappingBase-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MappingBase$new(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Ignored}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\Sexpr[results=rd]{tiledbsoma:::rd_return_virtual()}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MappingBase-keys"></a>}}
\if{latex}{\out{\hypertarget{method-MappingBase-keys}{}}}
\subsection{Method \code{keys()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MappingBase$keys()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The keys of the map
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MappingBase-values"></a>}}
\if{latex}{\out{\hypertarget{method-MappingBase-values}{}}}
\subsection{Method \code{values()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MappingBase$values()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A `list` containing the map values
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MappingBase-items"></a>}}
\if{latex}{\out{\hypertarget{method-MappingBase-items}{}}}
\subsection{Method \code{items()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MappingBase$items()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Return the items of the map as a list
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MappingBase-get"></a>}}
\if{latex}{\out{\hypertarget{method-MappingBase-get}{}}}
\subsection{Method \code{get()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MappingBase$get(key, default = quote(expr = ))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{Key to fetch}

\item{\code{default}}{Default value to fetch if \code{key} is not found;
defaults to \code{NULL}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The value of \code{key} in the map, or \code{default} if
\code{key} is not found
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MappingBase-set"></a>}}
\if{latex}{\out{\hypertarget{method-MappingBase-set}{}}}
\subsection{Method \code{set()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MappingBase$set(key, value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{Key to set}

\item{\code{value}}{Value to add for \code{key}, or \code{NULL} to remove
the entry for \code{key}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\[chainable\] Invisibly returns \code{self} with
\code{value} added as \code{key}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MappingBase-setv"></a>}}
\if{latex}{\out{\hypertarget{method-MappingBase-setv}{}}}
\subsection{Method \code{setv()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MappingBase$setv(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Named arguments to add to \code{self}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\[chainable\] Invisibly returns \code{self} with the values
of \code{...} added to the map
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MappingBase-remove"></a>}}
\if{latex}{\out{\hypertarget{method-MappingBase-remove}{}}}
\subsection{Method \code{remove()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MappingBase$remove(key)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{Key to remove}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\[chainable\] Invisibly returns \code{self} with \code{key}
removed from the map
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MappingBase-update"></a>}}
\if{latex}{\out{\hypertarget{method-MappingBase-update}{}}}
\subsection{Method \code{update()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MappingBase$update(map)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{map}}{A mapping type to update the current map with}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\[chainable\] Invisibly returns \code{self} with the value
of \code{map}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MappingBase-length"></a>}}
\if{latex}{\out{\hypertarget{method-MappingBase-length}{}}}
\subsection{Method \code{length()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MappingBase$length()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The number of items in the map
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MappingBase-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-MappingBase-to_list}{}}}
\subsection{Method \code{to_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MappingBase$to_list()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The map as a list
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MappingBase-print"></a>}}
\if{latex}{\out{\hypertarget{method-MappingBase-print}{}}}
\subsection{Method \code{print()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MappingBase$print()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\[chainable\] Prints information about the map to \code{stdout}
and invisibly returns \code{self}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MappingBase-clone"></a>}}
\if{latex}{\out{\hypertarget{method-MappingBase-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MappingBase$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
