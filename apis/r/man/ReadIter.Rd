% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ReadIter.R
\name{ReadIter}
\alias{ReadIter}
\title{SOMA Read Iterator Base class}
\description{
SOMA Read Iterator Base class

SOMA Read Iterator Base class
}
\details{
Class that allows for read iteration of SOMA reads.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ReadIter-new}{\code{ReadIter$new()}}
\item \href{#method-ReadIter-read_complete}{\code{ReadIter$read_complete()}}
\item \href{#method-ReadIter-read_next}{\code{ReadIter$read_next()}}
\item \href{#method-ReadIter-concat}{\code{ReadIter$concat()}}
\item \href{#method-ReadIter-clone}{\code{ReadIter$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReadIter-new"></a>}}
\if{latex}{\out{\hypertarget{method-ReadIter-new}{}}}
\subsection{Method \code{new()}}{
Create (lifecycle: experimental)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReadIter$new(
  uri,
  config,
  colnames = NULL,
  qc = NULL,
  dim_points = NULL,
  loglevel = "auto"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{uri}}{Character value with URI path to a SOMADataFrame or SOMASparseNDArray}

\item{\code{config}}{character vector containing TileDB config.}

\item{\code{colnames}}{Optional vector of character value with the name of the columns to retrieve}

\item{\code{qc}}{Optional external Pointer object to TileDB Query Condition, defaults to \sQuote{NULL} i.e.
no query condition}

\item{\code{dim_points}}{Optional named list with vector of data points to select on the given
dimension(s). Each dimension can be one entry in the list.}

\item{\code{loglevel}}{Character value with the desired logging level, defaults to \sQuote{auto}
which lets prior setting prevail, any other value is set as new logging level.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReadIter-read_complete"></a>}}
\if{latex}{\out{\hypertarget{method-ReadIter-read_complete}{}}}
\subsection{Method \code{read_complete()}}{
Check if iterated read is complete or not. (lifecycle: experimental)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReadIter$read_complete()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
logical
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReadIter-read_next"></a>}}
\if{latex}{\out{\hypertarget{method-ReadIter-read_next}{}}}
\subsection{Method \code{read_next()}}{
Read the next chunk of an iterated read. (lifecycle: experimental).
If read is complete, retunrs \code{NULL} and raises warning.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReadIter$read_next()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{NULL} or one of arrow::\link[arrow]{Table}, \link{matrixZeroBasedView}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReadIter-concat"></a>}}
\if{latex}{\out{\hypertarget{method-ReadIter-concat}{}}}
\subsection{Method \code{concat()}}{
Concatenate remainder of iterator
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReadIter$concat()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReadIter-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ReadIter-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReadIter$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
