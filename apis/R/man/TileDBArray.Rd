% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TileDBArray.R
\name{TileDBArray}
\alias{TileDBArray}
\title{TileDB Array Base Class}
\description{
Base class for representing an individual TileDB array.
}
\details{
\subsection{Initialization}{

Initializing a \code{TileDBArray} object does not automatically create a new array
at the specified \code{uri} if one does not already exist because we don't know
what the schema will be. Arrays are only created by child classes, which
populate the private \code{create_empty_array()} and \code{ingest_data()} methods.
}
}
\section{Super class}{
\code{\link[tiledbsc:TileDBObject]{tiledbsc::TileDBObject}} -> \code{TileDBArray}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TileDBArray-new}{\code{TileDBArray$new()}}
\item \href{#method-TileDBArray-print}{\code{TileDBArray$print()}}
\item \href{#method-TileDBArray-array_exists}{\code{TileDBArray$array_exists()}}
\item \href{#method-TileDBArray-tiledb_array}{\code{TileDBArray$tiledb_array()}}
\item \href{#method-TileDBArray-get_metadata}{\code{TileDBArray$get_metadata()}}
\item \href{#method-TileDBArray-add_metadata}{\code{TileDBArray$add_metadata()}}
\item \href{#method-TileDBArray-schema}{\code{TileDBArray$schema()}}
\item \href{#method-TileDBArray-dimensions}{\code{TileDBArray$dimensions()}}
\item \href{#method-TileDBArray-attributes}{\code{TileDBArray$attributes()}}
\item \href{#method-TileDBArray-dimnames}{\code{TileDBArray$dimnames()}}
\item \href{#method-TileDBArray-fragment_count}{\code{TileDBArray$fragment_count()}}
\item \href{#method-TileDBArray-attrnames}{\code{TileDBArray$attrnames()}}
\item \href{#method-TileDBArray-set_query}{\code{TileDBArray$set_query()}}
\item \href{#method-TileDBArray-reset_query}{\code{TileDBArray$reset_query()}}
\item \href{#method-TileDBArray-clone}{\code{TileDBArray$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="tiledbsc" data-topic="TileDBObject" data-id="class"><a href='../../tiledbsc/html/TileDBObject.html#method-TileDBObject-class'><code>tiledbsc::TileDBObject$class()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsc" data-topic="TileDBObject" data-id="exists"><a href='../../tiledbsc/html/TileDBObject.html#method-TileDBObject-exists'><code>tiledbsc::TileDBObject$exists()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TileDBArray-new"></a>}}
\if{latex}{\out{\hypertarget{method-TileDBArray-new}{}}}
\subsection{Method \code{new()}}{
Create a new TileDBArray object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$new(uri, verbose = TRUE, config = NULL, ctx = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{uri}}{URI for the TileDB array}

\item{\code{verbose}}{Print status messages}

\item{\code{config}}{optional configuration}

\item{\code{ctx}}{optional tiledb context}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TileDBArray-print"></a>}}
\if{latex}{\out{\hypertarget{method-TileDBArray-print}{}}}
\subsection{Method \code{print()}}{
Print summary of the array.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TileDBArray-array_exists"></a>}}
\if{latex}{\out{\hypertarget{method-TileDBArray-array_exists}{}}}
\subsection{Method \code{array_exists()}}{
Check if the array exists.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$array_exists()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
TRUE if the array exists, FALSE otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TileDBArray-tiledb_array"></a>}}
\if{latex}{\out{\hypertarget{method-TileDBArray-tiledb_array}{}}}
\subsection{Method \code{tiledb_array()}}{
Return a \code{\link{TileDBArray}} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$tiledb_array(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Optional arguments to pass to \code{tiledb::tiledb_array()}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \code{\link[tiledb:tiledb_array]{tiledb::tiledb_array}} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TileDBArray-get_metadata"></a>}}
\if{latex}{\out{\hypertarget{method-TileDBArray-get_metadata}{}}}
\subsection{Method \code{get_metadata()}}{
Retrieve metadata from the TileDB array.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$get_metadata(key = NULL, prefix = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{The name of the metadata attribute to retrieve.}

\item{\code{prefix}}{Filter metadata using an optional prefix. Ignored if \code{key}
is not NULL.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list of metadata values.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TileDBArray-add_metadata"></a>}}
\if{latex}{\out{\hypertarget{method-TileDBArray-add_metadata}{}}}
\subsection{Method \code{add_metadata()}}{
Add list of metadata to the specified TileDB array.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$add_metadata(metadata, prefix = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{metadata}}{Named list of metadata to add.}

\item{\code{prefix}}{Optional prefix to add to the metadata attribute names.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TileDBArray-schema"></a>}}
\if{latex}{\out{\hypertarget{method-TileDBArray-schema}{}}}
\subsection{Method \code{schema()}}{
Retrieve the array schema
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$schema()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{\link[tiledb:tiledb_array_schema]{tiledb::tiledb_array_schema}} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TileDBArray-dimensions"></a>}}
\if{latex}{\out{\hypertarget{method-TileDBArray-dimensions}{}}}
\subsection{Method \code{dimensions()}}{
Retrieve the array dimensions
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$dimensions()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of \code{\link[tiledb:tiledb_dim]{tiledb::tiledb_dim}} objects
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TileDBArray-attributes"></a>}}
\if{latex}{\out{\hypertarget{method-TileDBArray-attributes}{}}}
\subsection{Method \code{attributes()}}{
Retrieve the array attributes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$attributes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of \code{\link[tiledb:tiledb_attr]{tiledb::tiledb_attr}} objects
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TileDBArray-dimnames"></a>}}
\if{latex}{\out{\hypertarget{method-TileDBArray-dimnames}{}}}
\subsection{Method \code{dimnames()}}{
Retrieve dimension names
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$dimnames()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A character vector with the array's dimension names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TileDBArray-fragment_count"></a>}}
\if{latex}{\out{\hypertarget{method-TileDBArray-fragment_count}{}}}
\subsection{Method \code{fragment_count()}}{
Get number of fragments in the array
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$fragment_count()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TileDBArray-attrnames"></a>}}
\if{latex}{\out{\hypertarget{method-TileDBArray-attrnames}{}}}
\subsection{Method \code{attrnames()}}{
Retrieve attribute names
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$attrnames()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A character vector with the array's attribute names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TileDBArray-set_query"></a>}}
\if{latex}{\out{\hypertarget{method-TileDBArray-set_query}{}}}
\subsection{Method \code{set_query()}}{
Set dimension values to slice from the array.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$set_query(dims = NULL, attr_filter = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dims}}{a named list of character vectors. Each name must correspond
to an array dimension. The character vectors within each element are used
to set the arrays selected ranges for each corresponding dimension.}

\item{\code{attr_filter}}{a TileDB query condition for attribute filtering.
pushdown.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TileDBArray-reset_query"></a>}}
\if{latex}{\out{\hypertarget{method-TileDBArray-reset_query}{}}}
\subsection{Method \code{reset_query()}}{
Reset the query. By default both dimension ranges and
attribute filters are cleared.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$reset_query(dims = TRUE, attr_filter = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dims}}{Clear the defined dimension ranges?}

\item{\code{attr_filter}}{Clear the defined attribute filters?}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TileDBArray-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TileDBArray-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TileDBArray$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
