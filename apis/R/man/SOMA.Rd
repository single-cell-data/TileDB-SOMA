% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SOMA.R
\name{SOMA}
\alias{SOMA}
\title{SOMA: Stack of Matrices, Annotated}
\description{
Class for representing a group of TileDB groups/arrays that consitute a
\code{SOMA} (stack of matrices, annotated), which includes:
\itemize{
\item \code{X} (\code{\link{AssayMatrixGroup}}): a group of one or more labeled 2D sparse arrays
that share the same dimensions.
\item \code{obs} (\code{\link{AnnotationDataframe}}): 1D labeled array with column labels for
\code{X}
\item \code{var} (\code{\link{AnnotationDataframe}}): 1D labeled array with row labels for \code{X}
}
}
\section{Super classes}{
\code{\link[tiledbsc:TileDBObject]{tiledbsc::TileDBObject}} -> \code{\link[tiledbsc:TileDBGroup]{tiledbsc::TileDBGroup}} -> \code{SOMA}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{obs}}{\code{\link{AnnotationDataframe}} object containing observation-aligned
annotations}

\item{\code{var}}{\code{\link{AnnotationDataframe}} object containing variable-aligned
annotations}

\item{\code{X}}{named list of \code{\link{AssayMatrix}} object containing matrix-like
assay data with string dimensions \code{obs_id} and \code{var_id} that align to the
dimensions of the \code{obs} and \code{var} arrays, respectively.}

\item{\code{obsm}}{named list of \code{\link{AnnotationMatrix}} objects aligned with \code{obs}}

\item{\code{varm}}{named list of \code{\link{AnnotationMatrix}} objects aligned with \code{var}}

\item{\code{obsp}}{named list of \code{\link{AnnotationPairwiseMatrix}} objects aligned with \code{obs}}

\item{\code{varp}}{named list of \code{\link{AnnotationPairwiseMatrix}} objects aligned with \code{var}}

\item{\code{uns}}{Named list of unstructured objects.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SOMA-new}{\code{SOMA$new()}}
\item \href{#method-SOMA-set_query}{\code{SOMA$set_query()}}
\item \href{#method-SOMA-reset_query}{\code{SOMA$reset_query()}}
\item \href{#method-SOMA-from_seurat_assay}{\code{SOMA$from_seurat_assay()}}
\item \href{#method-SOMA-to_seurat_assay}{\code{SOMA$to_seurat_assay()}}
\item \href{#method-SOMA-add_seurat_dimreduction}{\code{SOMA$add_seurat_dimreduction()}}
\item \href{#method-SOMA-get_seurat_dimreduction}{\code{SOMA$get_seurat_dimreduction()}}
\item \href{#method-SOMA-get_seurat_dimreductions_list}{\code{SOMA$get_seurat_dimreductions_list()}}
\item \href{#method-SOMA-to_seurat_object}{\code{SOMA$to_seurat_object()}}
\item \href{#method-SOMA-to_summarized_experiment}{\code{SOMA$to_summarized_experiment()}}
\item \href{#method-SOMA-to_single_cell_experiment}{\code{SOMA$to_single_cell_experiment()}}
\item \href{#method-SOMA-get_annotation_matrix_arrays}{\code{SOMA$get_annotation_matrix_arrays()}}
\item \href{#method-SOMA-get_annotation_pairwise_matrix_arrays}{\code{SOMA$get_annotation_pairwise_matrix_arrays()}}
\item \href{#method-SOMA-clone}{\code{SOMA$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="tiledbsc" data-topic="TileDBObject" data-id="class"><a href='../../tiledbsc/html/TileDBObject.html#method-TileDBObject-class'><code>tiledbsc::TileDBObject$class()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsc" data-topic="TileDBObject" data-id="exists"><a href='../../tiledbsc/html/TileDBObject.html#method-TileDBObject-exists'><code>tiledbsc::TileDBObject$exists()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsc" data-topic="TileDBGroup" data-id="add_member"><a href='../../tiledbsc/html/TileDBGroup.html#method-TileDBGroup-add_member'><code>tiledbsc::TileDBGroup$add_member()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsc" data-topic="TileDBGroup" data-id="add_metadata"><a href='../../tiledbsc/html/TileDBGroup.html#method-TileDBGroup-add_metadata'><code>tiledbsc::TileDBGroup$add_metadata()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsc" data-topic="TileDBGroup" data-id="count_members"><a href='../../tiledbsc/html/TileDBGroup.html#method-TileDBGroup-count_members'><code>tiledbsc::TileDBGroup$count_members()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsc" data-topic="TileDBGroup" data-id="get_member"><a href='../../tiledbsc/html/TileDBGroup.html#method-TileDBGroup-get_member'><code>tiledbsc::TileDBGroup$get_member()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsc" data-topic="TileDBGroup" data-id="get_members"><a href='../../tiledbsc/html/TileDBGroup.html#method-TileDBGroup-get_members'><code>tiledbsc::TileDBGroup$get_members()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsc" data-topic="TileDBGroup" data-id="get_metadata"><a href='../../tiledbsc/html/TileDBGroup.html#method-TileDBGroup-get_metadata'><code>tiledbsc::TileDBGroup$get_metadata()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsc" data-topic="TileDBGroup" data-id="group_exists"><a href='../../tiledbsc/html/TileDBGroup.html#method-TileDBGroup-group_exists'><code>tiledbsc::TileDBGroup$group_exists()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsc" data-topic="TileDBGroup" data-id="list_member_uris"><a href='../../tiledbsc/html/TileDBGroup.html#method-TileDBGroup-list_member_uris'><code>tiledbsc::TileDBGroup$list_member_uris()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsc" data-topic="TileDBGroup" data-id="list_members"><a href='../../tiledbsc/html/TileDBGroup.html#method-TileDBGroup-list_members'><code>tiledbsc::TileDBGroup$list_members()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsc" data-topic="TileDBGroup" data-id="list_object_uris"><a href='../../tiledbsc/html/TileDBGroup.html#method-TileDBGroup-list_object_uris'><code>tiledbsc::TileDBGroup$list_object_uris()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsc" data-topic="TileDBGroup" data-id="list_objects"><a href='../../tiledbsc/html/TileDBGroup.html#method-TileDBGroup-list_objects'><code>tiledbsc::TileDBGroup$list_objects()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsc" data-topic="TileDBGroup" data-id="print"><a href='../../tiledbsc/html/TileDBGroup.html#method-TileDBGroup-print'><code>tiledbsc::TileDBGroup$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsc" data-topic="TileDBGroup" data-id="remove_member"><a href='../../tiledbsc/html/TileDBGroup.html#method-TileDBGroup-remove_member'><code>tiledbsc::TileDBGroup$remove_member()</code></a></span></li>
<li><span class="pkg-link" data-pkg="tiledbsc" data-topic="TileDBGroup" data-id="tiledb_group"><a href='../../tiledbsc/html/TileDBGroup.html#method-TileDBGroup-tiledb_group'><code>tiledbsc::TileDBGroup$tiledb_group()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMA-new"></a>}}
\if{latex}{\out{\hypertarget{method-SOMA-new}{}}}
\subsection{Method \code{new()}}{
Create a new SOMA. The existing array group is
opened at the specified array \code{uri} if one is present, otherwise a new
array group is created.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMA$new(uri, verbose = TRUE, config = NULL, ctx = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{uri}}{URI of the TileDB group}

\item{\code{verbose}}{Print status messages}

\item{\code{config}}{optional configuration}

\item{\code{ctx}}{optional tiledb context}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMA-set_query"></a>}}
\if{latex}{\out{\hypertarget{method-SOMA-set_query}{}}}
\subsection{Method \code{set_query()}}{
Set query parameters to slice by dimension values or filter
by attribute values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMA$set_query(
  obs_ids = NULL,
  var_ids = NULL,
  obs_attr_filter = NULL,
  var_attr_filter = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{obs_ids, var_ids}}{character vector containing observation- or
variable-identifiers.}

\item{\code{obs_attr_filter, var_attr_filter}}{a TileDB query condition for
attribute filtering pushdown.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
A SOMA can be filtered in two ways:
\enumerate{
\item dimension slicing: vectors of cell- or feature-identifiers passed to
\code{obs_ids} and/or \code{var_ids}, respectively, which are applied to the
\link[tiledb:selected_ranges-tiledb_array-method]{selected ranges} of member arrays with the
appropriate dimension(s).
\item attribute filtering: logical expressions that reference
attributes within the \code{obs} and \code{var} arrays are applied to each array's
\link[tiledb:query_condition-tiledb_array-method]{query condition}.
}

Dimension slicing is applied whenever an array member is accessed,
causing only data for the specified identifiers to be read into memory.

Attribute filters are applied immediately to \code{obs} and/or \code{var} and the
identifiers that pass the specified conditions are applied to the
\link[tiledb:selected_ranges-tiledb_array-method]{selected ranges} of member arrays with the
appropriate dimension(s).

Filters are applied automatically to all members of a SOMA with the
exception of \code{uns}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMA-reset_query"></a>}}
\if{latex}{\out{\hypertarget{method-SOMA-reset_query}{}}}
\subsection{Method \code{reset_query()}}{
Reset query dimensions and attribute filters.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMA$reset_query()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMA-from_seurat_assay"></a>}}
\if{latex}{\out{\hypertarget{method-SOMA-from_seurat_assay}{}}}
\subsection{Method \code{from_seurat_assay()}}{
Convert a Seurat Assay to a TileDB-backed sc_group.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMA$from_seurat_assay(
  object,
  obs = NULL,
  var = TRUE,
  layers = c("counts", "data", "scale.data")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{object}}{A \code{\link[SeuratObject:Assay-class]{SeuratObject::Assay}} object}

\item{\code{obs}}{An optional \code{data.frame} containing annotations for
cell/sample-level observations. If no annotations are provided and the
\code{obs} array doesn't yet exist, an array with 0 attributes is
created.}

\item{\code{var}}{Should the \code{Assay}'s' feature-level annotations be ingested
into the \code{var} array? If \code{FALSE} and the \code{var} array does not yet exist
then \code{var} is created as an array with 0 attributes.}

\item{\code{layers}}{A vector of assay layer names to ingest. Must be some
combination of \code{"counts"}, \code{"data"}, \code{"scale.data"}.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\subsection{Assay data}{

The \code{\link[SeuratObject:Assay-class]{SeuratObject::Assay}} class stores different transformations of an
assay in the \code{counts}, \code{data}, and \code{scale.data} slots. Data from each of
these slots is ingested into a separate layer of the \code{X} group, named for
the corresponding slot.

By default \emph{Seurat} populates the \code{data} slot with a reference to the
same data stored in \code{counts}. To avoid ingesting redundant data, we check
to see if \code{counts} and \code{data} are identical and skip the \code{data} slot if
they are.
}

\subsection{Annotations}{

Cell- and feature-level annotations are stored in the \code{obs} and \code{var}
arrays, respectively. These arrays are \emph{always} created during the
initial ingestion in order to maintain the full set of cell and feature
identifiers in the array dimension.
}

\subsection{Variable features}{

Variable features in the \code{var.features} slot are maintained by creating a
\code{highly_variable} attribute in \code{var} that records \code{1} or \code{0} for each
feature indicating whether it was a variable feature or not.
}

\subsection{Metadata}{
\itemize{
\item \code{key} (optional): Contains value of the the Seurat \code{Assay}'s \code{key} slot
if it is set.
}
}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMA-to_seurat_assay"></a>}}
\if{latex}{\out{\hypertarget{method-SOMA-to_seurat_assay}{}}}
\subsection{Method \code{to_seurat_assay()}}{
Convert to a \code{\link[SeuratObject:Assay-class]{SeuratObject::Assay}} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMA$to_seurat_assay(
  layers = c("counts", "data", "scale.data"),
  min_cells = 0,
  min_features = 0,
  check_matrix = FALSE,
  batch_mode = FALSE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{layers}}{A vector of assay layer names to retrieve. Must match one
or more of the available \code{X} \code{\link{AssayMatrix}} layers.}

\item{\code{min_cells}}{Include features detected in at least this many cells.
Will subset the counts matrix as well. To reintroduce excluded features,
create a new object with a lower cutoff.}

\item{\code{min_features}}{Include cells where at least this many features are
detected.}

\item{\code{check_matrix}}{Check counts matrix for NA, NaN, Inf, and non-integer
values}

\item{\code{batch_mode}}{logical, if \code{TRUE}, batch query mode is enabled for
retrieving \code{X} layers. See \code{\link[=AssayMatrix]{AssayMatrix$to_dataframe()}} for
more information.}

\item{\code{...}}{Arguments passed to \code{\link[SeuratObject:as.sparse]{SeuratObject::as.sparse}}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMA-add_seurat_dimreduction"></a>}}
\if{latex}{\out{\hypertarget{method-SOMA-add_seurat_dimreduction}{}}}
\subsection{Method \code{add_seurat_dimreduction()}}{
Convert a \code{\link[SeuratObject:DimReduc-class]{SeuratObject::DimReduc}} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMA$add_seurat_dimreduction(object, technique = NULL, metadata = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{object}}{A \code{\link[SeuratObject:DimReduc-class]{SeuratObject::DimReduc}} object}

\item{\code{technique}}{Name of the dimensional reduction technique. By default,
the \code{key} slot is used to determine the technique.}

\item{\code{metadata}}{Named list of metadata to add.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\subsection{On-Disk Format}{

Seurat \code{\link{DimReduc}} objects contain a variety of slots to accommodate the
various types of results produced by each of the supported dimensional
reduction techniques. Each slot is stored as an \code{\link{AnnotationMatrix}}
object in the \code{obsm} or \code{varm} slot group for the assay, depending
whether the data is observation- or variable-aligned. The individual
arrays are named \verb{dimreduction_<technique>}.
}

\subsection{Metadata}{
\itemize{
\item \code{dimreduction_technique}: Name of the dimensional reduction technique
used.
\item \code{dimreduction_key}: String prefix used in the dimensional reduction
results column names (required by Seurat)
}
}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMA-get_seurat_dimreduction"></a>}}
\if{latex}{\out{\hypertarget{method-SOMA-get_seurat_dimreduction}{}}}
\subsection{Method \code{get_seurat_dimreduction()}}{
Convert to a \code{\link[SeuratObject:DimReduc-class]{SeuratObject::DimReduc}} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMA$get_seurat_dimreduction(technique = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{technique}}{Name of the dimensionality reduction technique. Used to
identify which \code{obsm}/\code{varm} array will be retrieved. If \code{NULL}, we
default to the first \code{obsm/dimreduction_} array.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMA-get_seurat_dimreductions_list"></a>}}
\if{latex}{\out{\hypertarget{method-SOMA-get_seurat_dimreductions_list}{}}}
\subsection{Method \code{get_seurat_dimreductions_list()}}{
Retrieve a list of all \code{\link[SeuratObject:DimReduc-class]{SeuratObject::DimReduc}} objects.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMA$get_seurat_dimreductions_list()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMA-to_seurat_object"></a>}}
\if{latex}{\out{\hypertarget{method-SOMA-to_seurat_object}{}}}
\subsection{Method \code{to_seurat_object()}}{
Convert to a \link[SeuratObject:Seurat-class]{SeuratObject::Seurat} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMA$to_seurat_object(project = "SeuratProject")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project}}{\code{\link[SeuratObject:Project]{SeuratObject::Project}} name for the \code{Seurat} object}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMA-to_summarized_experiment"></a>}}
\if{latex}{\out{\hypertarget{method-SOMA-to_summarized_experiment}{}}}
\subsection{Method \code{to_summarized_experiment()}}{
Convert to a \link[SummarizedExperiment:RangedSummarizedExperiment-class]{SummarizedExperiment::SummarizedExperiment}
object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMA$to_summarized_experiment(
  layers = c("counts", "data", "scale.data"),
  batch_mode = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{layers}}{A vector of assay layer names to retrieve. Must match one
or more of the available \code{X} \code{\link{AssayMatrix}} layers. If \code{layers} is
\emph{named} (e.g., \code{c(logdata = "counts")}) the assays will adopt the names
of the layers vector.}

\item{\code{batch_mode}}{logical, if \code{TRUE}, batch query mode is enabled for
retrieving \code{X} layers. See \code{\link[=AssayMatrix]{AssayMatrix$to_dataframe()}} for
more information.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\subsection{Layers}{

Note that \code{SummarizedExperiment::Assays()} requires that all assays share
identical dimensions, so the conversion will fail if \code{scale.data} created
with a subset of features is included.
}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMA-to_single_cell_experiment"></a>}}
\if{latex}{\out{\hypertarget{method-SOMA-to_single_cell_experiment}{}}}
\subsection{Method \code{to_single_cell_experiment()}}{
Convert to a Bioconductor
\link[SingleCellExperiment:SingleCellExperiment]{SingleCellExperiment::SingleCellExperiment} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMA$to_single_cell_experiment(
  layers = c("counts", "data"),
  batch_mode = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{layers}}{A vector of assay layer names to retrieve. Must match one
or more of the available \code{X} \code{\link{AssayMatrix}} layers. If \code{layers} is
\emph{named} (e.g., \code{c(logdata = "counts")}) the assays will adopt the names
of the layers vector.}

\item{\code{batch_mode}}{logical, if \code{TRUE}, batch query mode is enabled for
retrieving \code{X} layers. See \code{\link[=AssayMatrix]{AssayMatrix$to_dataframe()}} for
more information.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMA-get_annotation_matrix_arrays"></a>}}
\if{latex}{\out{\hypertarget{method-SOMA-get_annotation_matrix_arrays}{}}}
\subsection{Method \code{get_annotation_matrix_arrays()}}{
Retrieve \code{\link{AnnotationMatrix}} arrays in \code{obsm}/\code{varm}
groups.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMA$get_annotation_matrix_arrays(prefix = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{prefix}}{String prefix to filter the array names.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list with \code{"obsm"}/\code{"varm"} slots containing arrays matching
the prefix.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMA-get_annotation_pairwise_matrix_arrays"></a>}}
\if{latex}{\out{\hypertarget{method-SOMA-get_annotation_pairwise_matrix_arrays}{}}}
\subsection{Method \code{get_annotation_pairwise_matrix_arrays()}}{
Retrieve \code{\link{AnnotationPairwiseMatrix}} arrays in
\code{obsp}/\code{varp} groups.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMA$get_annotation_pairwise_matrix_arrays(prefix = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{prefix}}{String prefix to filter the array names.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list with \code{"obsp"}/\code{"varp"} slots containing arrays matching
the prefix.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SOMA-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SOMA-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SOMA$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
