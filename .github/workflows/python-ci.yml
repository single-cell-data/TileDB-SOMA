name: TileDB-SOMA Python CI

on:
  pull_request:
    paths-ignore:
      - 'apis/r/**'
  push:
    branches: [main]
  release:
    types: [published]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # TODO: restore Windows build once we have C++/libtiledbsoma integration supported there
        os: [ubuntu-22.04, macos-12]
        # os: [ubuntu-22.04, macos-12, windows-2019]
        python-version: ['3.7', '3.8', '3.9', '3.10']
        include:
          - runs-on: ubuntu-22.04
            cc: gcc-11
            cxx: g++-11
          - runs-on: macos-12
            cc: gcc-11
            cxx: g++-11

    steps:
    - name: Select XCode version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        # Pending https://github.com/actions/runner-images/issues/6350
        xcode-version: '13.4'
      if: ${{ runner.os == 'macOS' }}

    - name: Checkout TileDB-SOMA
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # ensure we get all tags to inform package version determination

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: pip
        cache-dependency-path: ./apis/python/setup.py

    - name: Cache native libraries
      uses: actions/cache@v3
      with:
        path: |
          build
          dist
        key: libtiledbsoma-build-dist-${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('libtiledbsoma', 'apis/python/setup.py') }}

    - name: Install testing prereqs
      run: python -m pip -v install -U pip pytest-cov typeguard

    - name: Restore pre-commit cache
      if: matrix.os == 'ubuntu-22.04' && matrix.python-version == '3.9'
      uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('.github/workflows/python-ci.yml') }}

    - name: Run pre-commit hooks on all files
      if: matrix.os == 'ubuntu-22.04' && matrix.python-version == '3.9'
      run: python -m pip -v install pre-commit && pre-commit run -a -v

    - name: Check C++ Format
      if: matrix.os == 'ubuntu-22.04' && matrix.python-version == '3.9'
      run: ./scripts/run-clang-format.sh . clang-format 0 $(find libtiledbsoma -name "*.cc" -or -name "*.h")

    - name: Install tiledbsoma
      run: python -m pip -v install -e apis/python
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}

    - name: Show package versions
      run: python scripts/show-versions.py

    - name: Show XCode version
      run: clang --version

    - name: Generate test data
      shell: bash
      run: |
        mkdir -p test/soco
        ./apis/python/tools/ingestor --soco -o test/soco -n data/pbmc3k_processed.h5ad data/10x-pbmc-multiome-v1.0/subset_100_100.h5ad

    - name: Run pytests
      # Setting PYTHONPATH ensures the tests load the in-tree source code unde apis/python/src
      # instead of copy we `pip install`ed to site-packages above. That's needed for the code
      # coverage analysis to work.
      run: PYTHONPATH=$(pwd)/apis/python/src python -m pytest --cov=apis/python/src --cov-report=xml apis/python/tests libtiledbsoma/test

    - name: Run libtiledbsoma unit tests
      run: ctest --test-dir build/libtiledbsoma -C Release --verbose

    - name: Report coverage to Codecov
      if: matrix.os == 'ubuntu-22.04' && matrix.python-version == '3.9'
      uses: codecov/codecov-action@v3
      with:
        flags: python
        # Although Codecov isn't supposed to require an auth token for public repos like this one,
        # the uploader can be unreliable without one; see
        #     https://github.com/codecov/codecov-action/issues/557#issuecomment-1216749652
        # As of this writing (8 Nov 2022) the CODECOV_TOKEN was generated by @aaronwolen in his
        # Codecov settings page for this repo, then filled into the GitHub Actions secrets.
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
