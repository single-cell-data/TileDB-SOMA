name: TileDB-SOMA Python CI

on:
  pull_request:
  push:
    branches: [main]
  release:
    types: [published]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # TODO: restore Windows build once we have C++/libtiledbsoma integration supported there
        os: [ubuntu-22.04, macos-12]
        # os: [ubuntu-22.04, macos-12, windows-2019]
        python-version: ['3.8', '3.9', '3.10']
        include:
          - runs-on: ubuntu-22.04
            cc: gcc-11
            cxx: g++-11
          - runs-on: macos-12
            cc: gcc-11
            cxx: g++-11

    steps:
    - name: Select XCode version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        # Pending https://github.com/actions/runner-images/issues/6350
        xcode-version: '13.4'
      if: ${{ runner.os == 'macOS' }}

    - name: Checkout TileDB-SOMA
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python packages
      run: python -m pip -v install pytest pytest-cov typeguard apis/python
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}

    - name: Show package versions
      run: python scripts/show-versions.py

    - name: Show XCode version
      run: clang --version

    - name: Generate test data
      shell: bash
      run: |
        mkdir -p test/soco
        ./apis/python/tools/ingestor --soco -o test/soco -n data/pbmc3k_processed.h5ad data/10x-pbmc-multiome-v1.0/subset_100_100.h5ad

    - name: Run pytests
      # Setting PYTHONPATH ensures the tests load the in-tree source code unde apis/python/src
      # instead of copy we `pip install`ed to site-packages above. That's needed for the code
      # coverage analysis to work.
      run: PYTHONPATH=$(pwd)/apis/python/src python -m pytest --cov=apis/python/src --cov-report=xml apis/python/tests libtiledbsoma/test

    - name: Run libtiledbsoma unit tests
      run: ctest --test-dir build/libtiledbsoma -C Release --verbose

    - name: Report coverage to Codecov
      if: matrix.os == 'ubuntu-22.04' && matrix.python-version == '3.9'
      uses: codecov/codecov-action@v3
      with:
        flags: python
        # Although Codecov isn't supposed to require an auth token for public repos like this one,
        # the uploader can be unreliable without one; see
        #     https://github.com/codecov/codecov-action/issues/557#issuecomment-1216749652
        # As of this writing (8 Nov 2022) the CODECOV_TOKEN was generated by @aaronwolen in his
        # Codecov settings page for this repo, then filled into the GitHub Actions secrets.
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true

    - name: Build wheel distribution
      run: python -m pip -v wheel --no-deps --wheel-dir=dist-wheel apis/python
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}

    - name: Publish package to TestPyPI
      if: matrix.os == 'ubuntu-22.04' && github.event_name == 'release'
      uses: pypa/gh-action-pypi-publish@master
      continue-on-error: true
      with:
        repository_url: https://test.pypi.org/legacy/
        user: __token__
        password: ${{ secrets.TEST_PYPI_TOKEN }}
        packages_dir: dist-wheel
        verbose: true

    # Until general release of the main branch of tiledbsoma we'll follow the convention of tagging releases
    # 0.5.0a1, 0.5.1a1, etc -- always with the "a1" suffix -- that way PyPI will automagically make these
    # "prereleases". Then:
    # pip install tiledbsoma -> 0.1.12 (or whatever the main-old branch is at)
    # pip install --pre tiledbsoma -> 0.5.0a1 (or whatever the main branch is at)

    # When we're ready for prime time:
    # if: matrix.os == 'ubuntu-22.04' && github.event_name == 'release' && !github.event.release.prerelease

#    # For now:
#    - name: Publish package to PyPI
#      if: matrix.os == 'ubuntu-22.04' && github.event_name == 'release' && (contains(${{github.event.release.tag_name}}, "a") || contains(${github.event.release.tag_name}}, "b"))
#      uses: pypa/gh-action-pypi-publish@master
#      with:
#        user: __token__
#        password: ${{ secrets.PYPI_TOKEN }}
#        packages_dir: dist-wheel
#        verbose: true

# Notes:
# The above is fine for releases; notes here are for manual ops.
# https://towardsdatascience.com/create-your-own-python-package-and-publish-it-into-pypi-9306a29bc116
# TL;DR:
# o cd apis/python
# o python setup.py sdist
# o python -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*
#   - Be sure to use username __token__ and password being the token you set up at test.pypi.org
# o pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple tiledbsoma
