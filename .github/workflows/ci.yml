name: TileDB-SingleCell CI

on:
  pull_request:
  push:
    branches: [main]
  release:
    types: [published]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
#        os: [ubuntu-latest, macos-10.15, windows-2019]
        os: [ubuntu-latest, macos-10.15]
        python-version: ['3.8']
        include:
          - runs-on: ubuntu-latest
            cc: gcc-10
            cxx: g++-10
    env:
      MACOSX_DEPLOYMENT_TARGET: 10.14

    steps:
    - name: 'Print env'
      run: |
        echo "'uname -s' is:"
        echo "uname: " $(uname)
        echo "uname -m: " $(uname -m)
        echo "uname -r:" $(uname -r)
        echo "uname -s: " $(uname -s)
        echo "uname -v: " $(uname -v)
        printenv
      shell: bash
      if: ${{ runner.os != 'Windows' }}

    - name: Checkout TileDB-SingleCell
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python packages
      run: python -m pip install apis/python[ci]

    - name: Run pytests
      run: python -m pytest apis/python/tests

    - name: Build wheel distribution
      run: python -m pip wheel --no-deps --wheel-dir=dist apis/python

    - name: Publish package to TestPyPI
      if: matrix.os == 'ubuntu-latest' && github.event_name == 'release'
      uses: pypa/gh-action-pypi-publish@master
      continue-on-error: true
      with:
        repository_url: https://test.pypi.org/legacy/
        user: __token__
        password: ${{ secrets.TEST_PYPI_TOKEN }}
        verbose: true

    - name: Publish package to PyPI
      if: matrix.os == 'ubuntu-latest' && github.event_name == 'release' && !github.event.release.prerelease
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.PYPI_TOKEN }}
        verbose: true

    - name: Build libtiledbsc
      shell: pwsh
      run: |
        $env:pybind11_DIR = python -m pybind11 --cmakedir
        echo "pybind11_DIR is: ${env:pybind11_DIR}"
        mkdir build
        cmake -B $env:GITHUB_WORKSPACE/build -S $env:GITHUB_WORKSPACE/libtiledbsc -Dpybind11_DIR=$env:pybind11_DIR
        cmake --build $env:GITHUB_WORKSPACE/build --target check-format
        cmake --build $env:GITHUB_WORKSPACE/build --config Release -j $env:NUMBER_OF_PROCESSORS 2>&1
        cmake --build $env:GITHUB_WORKSPACE/build --config Release -j $env:NUMBER_OF_PROCESSORS 2>&1
        cmake --build $env:GITHUB_WORKSPACE/build/libtiledbsc --config Release -j $env:NUMBER_OF_PROCESSORS -t build_tests 2>&1
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}

    - name: Run libtiledbsc tests
      shell: pwsh
      run: |
        $env:PATH += "$([IO.Path]::PathSeparator)${env:GITHUB_WORKSPACE}/build/externals/install/bin"
        pushd $env:GITHUB_WORKSPACE/build/libtiledbsc
        ctest -C Release --verbose
