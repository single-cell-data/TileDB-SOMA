name: TileDB-SOMA python sdist & wheels

on:
  # I.e. on request
  workflow_dispatch:
  # Normally the smoke test only runs on merge to main.  To run it on a PR CI, uncomment `pull_request:`
  # pull_request:
  #   branches: [main]
  # paths-ignore:
  #   - 'apis/r/**'
  release:
    types: [published]
  schedule:
    - cron: "42 9 * * *"

jobs:
  sdist:
    name: Build source distribution
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout TileDB-SOMA
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # ensure we get all tags to inform package version determination
    - name: Build sdist
      run: python setup.py sdist
      working-directory: ./apis/python
    - name: Upload sdist artifact to GitHub Actions storage
      uses: actions/upload-artifact@v3
      with:
        name: sdist
        path: apis/python/dist/

  # This step builds wheels and uploads them to GitHub Actions storage.
  # See also https://github.com/single-cell-data/TileDB-SOMA/issues/700.
  # See also https://github.com/single-cell-data/TileDB-SOMA/wiki/PyPI-packaging-WIP
  # for important transitional context.
  wheels:
    # Note: tries all supported Python versions as specified in apis/python/setup.py
    name: Build wheels on ${{ matrix.os }}
    needs: sdist
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: ubuntu-20.04
          cibw_build: 'cp3*-manylinux_x86_64'
          platform: manylinux2014
        - os: macos-11
          cibw_build: 'cp3*-macosx_x86_64'
          platform: macosx
    steps:
    - name: Download sdist artifact
      uses: actions/download-artifact@v3
      with:
        name: sdist
    - name: rename sdist
      run: cp tiledbsoma-*.tar.gz tiledbsoma.tar.gz && ls -lh
    - name: Build wheels
      uses: pypa/cibuildwheel@v2.11.3
      with:
        package-dir: tiledbsoma.tar.gz
      env:
        CIBW_BUILD: ${{ matrix.cibw_build }}
        CIBW_BUILD_VERBOSITY: 1
        CIBW_BEFORE_BUILD: bash -x -c 'rm -rf tiledbsoma*/dist_links/dist/lib*'
        # ^ Delete lib folder that apis/python/setup.py:find_or_build() looks for in deciding to
        #   run CMake build or not. Otherwise it'll keep reusing the library file built in the
        #   first iteration of cibuildwheel's outer loop, resulting in wheels with the library
        #   built for the wrong python version.
    - name: Upload wheels-${{ matrix.platform }} to GitHub Actions storage
      uses: actions/upload-artifact@v3
      with:
        name: wheels-${{ matrix.platform }}
        path: ./wheelhouse/*.whl

  # This step locally tries out the built wheels, without publishing to PyPI
  smoke-test:
    name: Smoke test wheels
    needs: wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: ubuntu-20.04
          platform: manylinux2014
          arch: x86_64
          cc: gcc-11
          cxx: g++-11
        - os: macos-11
          platform: macosx
          arch: x86_64
          cc: clang
          cxx: clang++
    steps:
    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: 3.8
    - name: Download artifacts
      uses: actions/download-artifact@v3
    - name: Install wheel
      run: |
        set -x
        ls -lR
        WHL=$(find . -name 'tiledbsoma-*-cp38-cp38-*${{ matrix.platform }}*_${{ matrix.arch }}.whl')
        unzip -l $WHL
        pip install wheel
        pip install $WHL
        echo "WHL=$WHL" >> $GITHUB_ENV
    - name: Smoke test ${{ matrix.os }}
      run: python -c 'import tiledbsoma; print(tiledbsoma.pytiledbsoma.__file__); tiledbsoma.show_package_versions()'
      # TODO: more thorough local smoke test
    - name: Smoke test in docker
      # Repeat test in stock ubuntu 20.04 docker image. This uses an older pip
      # version with the old dependency solver. see issue #1051
      if: ${{ matrix.platform == 'manylinux2014' }}
      run: |
        docker run -v $(pwd):/mnt ubuntu:20.04 bash -ec "
          apt-get -qq update && apt-get install -y python3-pip python3-wheel
          pip3 install /mnt/$WHL
          python3 -c 'import tiledbsoma; print(tiledbsoma.pytiledbsoma.__file__); tiledbsoma.show_package_versions()'
        "

  publish-to-test-pypi:
    name: Publish package to TestPyPI
    needs: smoke-test
    runs-on: ubuntu-20.04
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
    steps:
    - name: Publish packages to TestPyPI
      uses: pypa/gh-action-pypi-publish@master
      continue-on-error: true
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_TOKEN }}
        packages_dir: dist-wheel
        verbose: true

  publish-to-pypi:
    name: Publish package to PyPI
    needs: smoke-test
    runs-on: ubuntu-20.04
    if: github.event_name == 'release'
    steps:
    - name: Publish packages to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.PYPI_TOKEN }}
        packages_dir: sdist, dist-wheel
        verbose: true

  create_issue_on_fail:
    runs-on: ubuntu-latest
    needs: publish-to-pypi
    if: failure() || cancelled()
    steps:
      - name: Checkout TileDB-SOMA `main`
        uses: actions/checkout@v2
      - name: Create Issue if Build Fails
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          filename: .github/workflows/daily-test-build-issue-template.md
