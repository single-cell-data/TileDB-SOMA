name: TileDB-SOMA python sdist & wheels

on:
  # I.e. on request
  workflow_dispatch:
  # Normally the smoke test only runs on merge to main.  To run it on a PR CI, uncomment `pull_request:`
  # pull_request:
  # branches: [main]
  # paths-ignore:
  #   - 'apis/r/**'
  release:
    types: [published]

jobs:
  sdist:
    name: Build source distribution
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout TileDB-SOMA
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # ensure we get all tags to inform package version determination
    - name: Build sdist
      run: python setup.py sdist
      working-directory: ./apis/python
    - name: Upload sdist artifact
      uses: actions/upload-artifact@v3
      with:
        name: sdist
        path: apis/python/dist/

  # This step builds wheels and uploads them to GitHub action storage.
  # See also https://github.com/single-cell-data/TileDB-SOMA/issues/700.
  # See also https://github.com/single-cell-data/TileDB-SOMA/wiki/PyPI-packaging-WIP
  # for important transitional context.
  wheels:
    # Note: tries all supported Python versions as specified in apis/python/setup.py
    name: Build wheels on ${{ matrix.os }}
    needs: sdist
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: ubuntu-20.04
          cibw_build: 'cp3*-manylinux_x86_64'
          platform: manylinux2014
        - os: macos-11
          cibw_build: 'cp3*-macosx_x86_64'
          platform: macosx
    steps:
    - name: Download sdist artifact
      uses: actions/download-artifact@v3
      with:
        name: sdist
    - name: rename sdist
      run: cp tiledbsoma-*.tar.gz tiledbsoma.tar.gz && ls -lh
    - name: Build wheels
      uses: pypa/cibuildwheel@v2.11.3
      with:
        package-dir: tiledbsoma.tar.gz
      env:
        CIBW_BUILD: ${{ matrix.cibw_build }}
        CIBW_BUILD_VERBOSITY: 1
        CIBW_BEFORE_BUILD: bash -x -c 'rm -rf tiledbsoma*/dist_links/dist/lib*'
        # ^ Delete lib folder that apis/python/setup.py:find_or_build() looks for in deciding to
        #   run CMake build or not. Otherwise it'll keep reusing the library file built in the
        #   first iteration of cibuildwheel's outer loop, resulting in wheels with the library
        #   built for the wrong python version.
    - name: Upload wheels-${{ matrix.platform }}
      uses: actions/upload-artifact@v3
      with:
        name: wheels-${{ matrix.platform }}
        path: ./wheelhouse/*.whl

  # This step locally tries out the built wheels, without publishing to PyPI
  smoke-test:
    name: Smoke test wheels
    needs: wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: ubuntu-20.04
          platform: manylinux2014
          arch: x86_64
        - os: macos-11
          platform: macosx
          arch: x86_64
    steps:
    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: 3.8
    - name: Download artifacts
      uses: actions/download-artifact@v3
    - name: Install wheel
      run: |
        set -x
        ls -lR
        whl=$(find . -name 'tiledbsoma-*-cp38-cp38-*${{ matrix.platform }}*_${{ matrix.arch }}.whl')
        unzip -l $whl
        pip install wheel
        pip install $whl
    - name: Smoke test ${{ matrix.os }}
      run: python -c 'import tiledbsoma; print(tiledbsoma.libtiledbsoma.__file__)'
      # TODO: more thorough local smoke test

  # TODO: publlish to TestPyPI
    #- name: Publish package to TestPyPI
    #  if: matrix.os == 'ubuntu-22.04' && github.event_name == 'release'
    #  uses: pypa/gh-action-pypi-publish@master
    #  continue-on-error: true
    #  with:
    #    repository_url: https://test.pypi.org/legacy/
    #    user: __token__
    #    password: ${{ secrets.TEST_PYPI_TOKEN }}
    #    packages_dir: dist-wheel
    #    verbose: true

  # TODO: publlish to PyPI
    # Until general release of the main branch of tiledbsoma we'll follow the convention of tagging releases
    # 0.5.0a1, 0.5.0a2, etc -- always with the "a" in it -- that way PyPI will automagically make these
    # "prereleases". Then:
    # pip install tiledbsoma -> 0.1.12 (or whatever the main-old branch is at)
    # pip install --pre tiledbsoma -> 0.5.0a1 (or whatever the main branch is at)

    # For prime time, once we're in 1.x release:
    # Not this:
    # if: github.event_name == 'release' && !github.event.release.prerelease
    # but this:
    # if: github.event_name == 'release'
    # Reasoning: once we're at 1.x, say we have a 1.3 which is released and a 1.4 which is
    # pre-release (at the GitHub tag level) then we do still want to upload that package to PyPI and
    # let people install it using `pip install --pre tiledbsoma`.

    # For now:
    #if: github.event_name == 'release' && (contains(${{github.event.release.tag_name}}, "a") || contains(${github.event.release.tag_name}}, "b"))
    #
    #steps:
    #- name: Publish packages to PyPI
    #  uses: pypa/gh-action-pypi-publish@master
    #  with:
    #    user: __token__
    #    password: ${{ secrets.PYPI_TOKEN }}
    #    packages_dir: sdist, dist-wheel
    #    verbose: true
