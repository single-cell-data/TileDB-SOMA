name: TileDB-SOMA R CI

on:
  pull_request:
    paths-ignore:
      - "apis/python/**"
      - ".pre-commit-config.yaml"
  push:
    branches:
      - main
      - 'release-*'
  workflow_dispatch:

env:
  COVERAGE_FLAGS: "r"
  COVERAGE_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  _R_CHECK_TESTS_NLINES_: 0
  CATCHSEGV: "TRUE"
  R_REMOTES_UPGRADE: "never"

jobs:
  ci:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux
            os: ubuntu-latest
            covr: 'no'
          - name: macos
            os: macOS-latest
            covr: 'no'
          - name: coverage
            os: ubuntu-latest
            covr: 'yes'

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Show matrix OS
        run: echo "matrix.os:" ${{ matrix.os }}

      - name: Linux CPU info
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: cat /proc/cpuinfo

      - name: MacOS CPU info
        if: ${{ matrix.os == 'macOS-latest' }}
        run: sysctl -a | grep cpu

      - name: Bootstrap
        run: cd apis/r && tools/r-ci.sh bootstrap

      - name: Set additional repositories (macOS)
        if: ${{ matrix.os != 'ubuntu-latest' }}
        run: echo 'options(repos = c("https://tiledb-inc.r-universe.dev", getOption("repos")))' | tee -a ~/.Rprofile

      - name: Set additional repositories (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          rversion <- paste(strsplit(as.character(getRversion()), split = '\\.')[[1L]][1:2], collapse = '.')
          codename <-  system('. /etc/os-release; echo ${VERSION_CODENAME}', intern = TRUE)
          repo <- sprintf("https://tiledb-inc.r-universe.dev/bin/linux/%s/%s/", codename, rversion)
          (opt <- sprintf('options(repos = c("%s", getOption("repos")))', repo))
          cat(opt, "\n", file = "~/.Rprofile", append = TRUE)
        shell: Rscript {0}

      - name: Install tiledb-r
        run: |
          options(bspm.version.check = TRUE)
          # Find tiledb-r constraints
          deps <- read.dcf('apis/r/DESCRIPTION', fields = 'Imports')[1, ]
          deps <- trimws(strsplit(gsub(pattern = ',', replacement = '\n', x = deps), split = '\n')[[1L]])
          deps <- Filter(nzchar, deps)
          deps <- Filter(function(x) grepl('^tiledb', x), deps)
          deps <- gsub(pattern = '[[:space:]]', replacement = '', x = deps)
          deps <- gsub(pattern = '.*\\(|\\)', replacement = '', x = deps)
          const <- data.frame(comp = gsub(pattern = '[[:digit:]\\.]*', replacement = '', x = deps))
          const$vers <- gsub(pattern = paste(const$comp, collapse = '|'), replacement = '', x = deps)
          const
          # Find correct version of tiledb-r
          db <- utils::available.packages(filters = c("R_version", "OS_type", "subarch"))
          idx <- which(rownames(db) == 'tiledb')
          valid <- vapply(
            idx,
            FUN = function(i) {
              v <- db[i, 'Version']
              res <- vector(mode = 'logical', length = nrow(const))
              for (i in seq_along(res)) {
                res[i] <- do.call(const$comp[i], args = list(v, const$vers[i]))
              }
              return(all(res))
            },
            FUN.VALUE = logical(1L)
          )
          if (!any(valid)) {
            stop("No valid versions of tiledb-r found")
          }
          db <- db[-idx[!valid], , drop = FALSE]
          # Install upstream deps
          ups <- tools::package_dependencies("tiledb", db = db, recursive = TRUE)$tiledb
          utils::install.packages(intersect(ups, rownames(db)))
          # Install correct version of tiledb-r
          ctb <- contrib.url(getOption("repos"))
          names(ctb) <- getOption("repos")
          dbr <- db[idx[valid], 'Repository']
          repos <- names(ctb[ctb %in% dbr])
          utils::install.packages("tiledb", repos = repos)
        shell: Rscript {0}

      - name: Install BioConductor package SingleCellExperiment
        run: cd apis/r && tools/r-ci.sh install_bioc SingleCellExperiment


      # Uncomment these next two stanzas as needed whenever we've just released a new tiledb-r for
      # which source is available but CRAN releases (and hence update r2u binaries) are not yet:
      #
      # IMPORTANT: these two stanzas should remain uncommented _only_ during the propagation time
      # between (a) publication of source for a new TileDB-R _upon which_ TileDB-SOMA depends in its
      # apis/R/DESCRIPTION file and (b) appearance of binaries.
      #
      # Please see https://github.com/single-cell-data/TileDB-SOMA/wiki/Branches-and-releases which
      # is crucial for anyone doing releases of TileDB-SOMA.
      #
      # Please edit both files in the same way:
      # * r-ci.yml
      # * r-python-interop-testing.yml
      #
      # Do not remove these comments until such time as we have eliminated our dependency on
      # the TileDB-R package.

      #- name: Install r-universe build of tiledb-r (macOS)
      #  if: ${{ matrix.os == 'macOS-latest' }}
      #  run: cd apis/r && Rscript -e "install.packages('tiledb', repos = c('https://eddelbuettel.r-universe.dev', 'https://cloud.r-project.org'))"

      #- name: Install r-universe build of tiledb-r (linux)
      #  if: ${{ matrix.os != 'macOS-latest' }}
      #  run: cd apis/r && Rscript -e "options(bspm.version.check=TRUE); install.packages('tiledb', repos = c('https://eddelbuettel.r-universe.dev/bin/linux/jammy/4.3/', 'https://cloud.r-project.org'))"

      - name: Dependencies
        run: R_REMOTES_UPGRADE=never cd apis/r && tools/r-ci.sh install_all

      # - name: Install dataset packages from source (macOS)
      #   if: ${{ matrix.os == 'macOS-latest' }}
      #   run: cd apis/r && _CI_PKG_TYPE_=both _CI_USE_BIOC_=true Rscript tools/install_missing_deps.R

      # - name: CMake
      #   uses: lukka/get-cmake@latest

      #- name: MkVars
      #  run: mkdir ~/.R && echo "CXX17FLAGS=-Wno-deprecated-declarations -Wno-deprecated" > ~/.R/Makevars

      #- name: Build and install libtiledbsoma
      #  run: sudo scripts/bld --prefix=/usr/local

      #- name: Call ldconfig
      #  if: ${{ matrix.os == 'ubuntu-latest' }}
      #  run: sudo ldconfig
      #
      # - name: Update Packages
      #   run: Rscript -e 'update.packages(ask=FALSE)'

      # - name: Build Package
      #   run: cd apis/r && R CMD build --no-build-vignettes --no-manual .

      # - name: Install Package
      #   run: cd apis/r && R CMD INSTALL $(ls -1tr *.tar.gz | tail -1)

      # - name: Diagnostics
      #   run: Rscript -e 'print(Sys.info())'

      # - name: Downgrade TileDB-R if needed
      #   run: cd apis/r && Rscript tools/controlled_downgrade.R

      - name: Test
        if: ${{ matrix.covr == 'no' }}
        run: cd apis/r && tools/r-ci.sh run_tests

      - name: Coverage
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.covr == 'yes' && github.event_name == 'workflow_dispatch' }}
        run: apis/r/tools/r-ci.sh coverage

      - name: View Logs
        run: apis/r/tools/r-ci.sh dump_logs
        if: failure()
