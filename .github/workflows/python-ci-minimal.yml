name: TileDB-SOMA Python CI (Minimal)

on:
  push:  # TODO: 'pull_request' not triggering; is 'push' acceptable?
    paths:
      - 'apis/python/**'
      - '!apis/r/**'
    branches-ignore:
      - main

jobs:
  lint:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout TileDB-SOMA
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # ensure we get all tags to inform package version determination

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install testing/linting prereqs
      run: python -m pip -v install -U pip pytest-cov typeguard pre-commit mypy types-setuptools

    - name: Run pre-commit hooks on all files
      run: pre-commit run -a -v

    - name: Check type annotations with mypy
      working-directory: apis/python
      run: python -m mypy .

    - name: Check C++ Format
      run: ./scripts/run-clang-format.sh . clang-format 0 $(find libtiledbsoma -name "*.cc" -or -name "*.h")
      
    
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-22.04]
        python-version: ['3.10', '3.7']
        include:
          - runs-on: ubuntu-22.04
            cc: gcc-11
            cxx: g++-11

    steps:
    - name: Checkout TileDB-SOMA
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # ensure we get all tags to inform package version determination

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # - name: Install testing/linting prereqs
    #   run: python -m pip -v install -U pip pytest-cov typeguard pre-commit mypy types-setuptools

    # - name: Run pre-commit hooks on all files
    #   if: matrix.python-version == '3.10'
    #   run: pre-commit run -a -v

    # - name: Check type annotations with mypy
    #   if: matrix.python-version == '3.10'
    #   working-directory: apis/python
    #   run: python -m mypy .

    # - name: Check C++ Format
    #   if: matrix.python-version == '3.10'
    #   run: ./scripts/run-clang-format.sh . clang-format 0 $(find libtiledbsoma -name "*.cc" -or -name "*.h")

    - name: Install tiledbsoma
      run: python -m pip -v install -e apis/python
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}

    - name: Show package versions
      run: python scripts/show-versions.py

    - name: Generate test data
      shell: bash
      run: |
        mkdir -p test/soco
        ./apis/python/tools/ingestor --soco -o test/soco -n data/pbmc3k_processed.h5ad data/10x-pbmc-multiome-v1.0/subset_100_100.h5ad

    - name: Run pytests
      # Setting PYTHONPATH ensures the tests load the in-tree source code unde apis/python/src
      # instead of copy we `pip install`ed to site-packages above. That's needed for the code
      # coverage analysis to work.
      run: PYTHONPATH=$(pwd)/apis/python/src python -m pytest --cov=apis/python/src --cov-report=xml apis/python/tests libtiledbsoma/test

    - name: Run libtiledbsoma unit tests
      run: ctest --test-dir build/libtiledbsoma -C Release --verbose

    - name: Report coverage to Codecov
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        flags: python
        # Although Codecov isn't supposed to require an auth token for public repos like this one,
        # the uploader can be unreliable without one; see
        #     https://github.com/codecov/codecov-action/issues/557#issuecomment-1216749652
        # As of this writing (8 Nov 2022) the CODECOV_TOKEN was generated by @aaronwolen in his
        # Codecov settings page for this repo, then filled into the GitHub Actions secrets.
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
