# This is a reusable workflow
# (https://docs.github.com/en/actions/using-workflows/reusing-workflows#calling-a-reusable-workflow),
# called by python-ci-full.yml and python-ci-minimal.yml.

name: TileDB-SOMA Python CI

on:
  workflow_call:
    inputs:
      python_version:
        required: true
        type: string
      os:
        required: true
        type: string
      cc:
        required: false
        type: string
      cxx:
        required: false
        type: string
      report_codecov:
        required: true
        type: boolean
      run_lint:
        required: false
        type: boolean
        default: false

jobs:
  lint:
    if: inputs.run_lint
    runs-on: ${{ inputs.os }}
    steps:
    - name: Checkout TileDB-SOMA
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python_version }}
        cache: pip
        cache-dependency-path: ./.github/workflows/python-ci-single.yml

    - name: Restore pre-commit cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ inputs.os }}-${{ inputs.python_version }}-${{ hashFiles('.github/workflows/python-ci-single.yml') }}

    - name: Run pre-commit hooks on all files
      run: python -m pip -v install pre-commit && pre-commit run -a -v

    # Skip files in apis/r/src which are:
    # * nanoarrow.c/h
    # * Auto-generated by Rcpp
    # * Things which Dirk doesn't want to be format-checked
    - name: Check C++ Format
      shell: bash
      run: ./scripts/run-clang-format.sh . clang-format 0 $(find libtiledbsoma apis/python/src -name "*.cc" -or -name "*.cpp" -or -name "*.h" | grep -v external)

  build:
    runs-on: ${{ inputs.os }}
    steps:
    - name: Show matrix OS
      run: echo "inputs.os:" ${{ inputs.os }}

    - name: Linux CPU info
      if: ${{ inputs.os == 'ubuntu-22.04' }}
      run: cat /proc/cpuinfo

    - name: MacOS CPU info
      if: ${{ inputs.os == 'macos-12' }}
      run: sysctl -a | grep cpu
    - name: Select XCode version
      if: startsWith(inputs.os, 'macos')
      uses: maxim-lobanov/setup-xcode@v1
      with:
        # Pending https://github.com/actions/runner-images/issues/6350
        xcode-version: '13.4'

    - name: Checkout TileDB-SOMA
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # ensure we get all tags to inform package version determination

    - name: Set up Python ${{ inputs.python_version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python_version }}
        cache: pip
        cache-dependency-path: ./apis/python/setup.py

# Experiment for MacOS CI false negatives ...
#    - name: Cache native libraries
#      uses: actions/cache@v3
#      with:
#        path: |
#          build
#          dist
#        key: libtiledbsoma-build-dist-${{ inputs.os }}-${{ inputs.python_version }}-${{ hashFiles('libtiledbsoma', 'scripts/bld') }}

    - name: Install testing prereqs
      run: python -m pip -v install -U pip pytest-cov 'typeguard<3.0' types-setuptools sparse

    - name: Install tiledbsoma
      run: python -m pip -v install -e apis/python
      env:
        CC: ${{ inputs.cc }}
        CXX: ${{ inputs.cxx }}

    - name: Show package versions
      run: python scripts/show-versions.py

    - name: Show XCode version
      run: clang --version

    - name: Obtain test data
      shell: bash
      run: |
        cd test
        rm -rf soco
        tar zxf soco.tgz
        cd ..

    - name: Run libtiledbsoma unit tests
      run: ctest --output-on-failure --test-dir build/libtiledbsoma -C Release --verbose

    - name: Run pytests for Python
      shell: bash
      # Setting PYTHONPATH ensures the tests load the in-tree source code unde apis/python/src
      # instead of copy we `pip install`ed to site-packages above. That's needed for the code
      # coverage analysis to work.
      run: PYTHONPATH=$(pwd)/apis/python/src python -m pytest --cov=apis/python/src --cov-report=xml apis/python/tests -v --durations=20

    - name: Report coverage to Codecov
      if: inputs.report_codecov
      uses: codecov/codecov-action@v3
      with:
        flags: python
        # Although Codecov isn't supposed to require an auth token for public repos like this one,
        # the uploader can be unreliable without one; see
        #     https://github.com/codecov/codecov-action/issues/557#issuecomment-1216749652
        # As of this writing (8 Nov 2022) the CODECOV_TOKEN was generated by @aaronwolen in his
        # Codecov settings page for this repo, then filled into the GitHub Actions secrets.
        token: ${{ secrets.CODECOV_TOKEN }}
